acl syntax:
acl <aclname> <creterion> [flags][operator] <value> ...

flags:
	-i

operator: 
	eq, ge, gt, le, lt

值：
	数值
		范围
		基于操作符作比较
	字符：
		-i
	模式
	IP地址或网络地址;

<creterion>: 匹配条件
	src
	src_port
	dst
	dst_port

	method
	path
	path_end
	path_beg




acl accessbbs url_beg /bbs
redirect /forum if accessbbs

redirect, block, http-request, use_backend


acl read method GET
acl read method HEAD
acl write method PUT
acl write method POST

use_backend imgservs if read
use_backend uploadservs if write








动静分离配置示例：
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .jpeg .gif .png .css .js

    use_backend static_servers          if url_static
    default_backend dynamic_servers

backend static_servers
    balance roundrobin
    server imgsrv1 172.16.200.7:80 check maxconn 6000
    server imgsrv2 172.16.200.8:80 check maxconn 6000

backend dynamic_servers
    balance source
    server websrv1 172.16.200.7:80 check maxconn 1000
    server websrv2 172.16.200.8:80 check maxconn 1000
    server websrv3 172.16.200.9:80 check maxconn 1000



    acl url_static       path_reg       -i .jpg$ .jpeg$ .gif$ .png$ .css$ .js$ ^/static ^/images ^/javascript ^/stylesheets

URL:   /path;params?query#frag

http://www.test.com/login.php?name=admin&password=123456



HEAD /check.txt HTTP/1.0




Java: 
	四个各自独立却又彼此相关的技术：
		Java程序设计语言
		Java类文件格式
		Java应用编程接口
		Java虚拟机


Java Development Kit
	JDK 1.0

J2ME
J2SE
J2EE

Java Card
Java ME
Java SE
Java EE

1991, James Gosling 
	Green Project
	Oak

1995: Java 1.0

SUN JDK
	JRE








Listener: 


JNDI: 


<server >
	<Listener >
	</Listener>
	<GlobalNamingResources>
	</GlobalNamingResources>
	<Service >
		<Connector    />
		<Engine >
			<Host >
			</Host>
			<Host >
				<Context>
				</Context>

			</Host>
		</Engine>
	</Service>




</server>




JVM: java 

java配置参数：
	-XX:+<option>: 开启此参数指定的功能；
	-XX:-<option>：关闭功能
	-XX:<option>=<value>：给option指定的选项赋值；

java -XX:+PrintFlagsFinal


-D<name>=<value>: set a system property




<%@ page language="java" %>
<%@ page import="java.util.*" %>
<html>
  <head>
    <title>JSP test page.</title>
  </head>
  <body>
    <% out.println("Welcome to MageEdu. Site, http://www.test.com"); %>
  </body>
</html>


.jsp --> Jasper --> .java --> javac --> .class






应用程序目录的结构：
/WEB-INF/web.xml：包含当前webapp的deploy描述符，如所有的servlet和JSP等动态文件的详细信息，会话超时时间和数据源等；因此，其也通常用于定义当前webapp特有的资源；
/WEB-INF/classes: 包含所有服务器端类及当前应用程序相关的其它第三方类等；
/WEB-INF/lib: 包含JSP所用到的JAR文件；
/META-INF/

用于tomcat的webapp即可以多个独立的文件组成，也可以是jar打包后的单个文件；这些打包后的文件的扩展名可用于判断其内容的类型，如：
  EJB通常打包为.jar
  webapp通常打包为.war
  资源适配器(Resource adapters)通常打包为.rar
  企业级应用程序通常打包为.ear，它通常是整合的EJB、webapp及资源适配器文件；
  Web服务通常会打包为.ear或.war；
  

于是，到底应该使用展开格式的文件还是打包为单个文件的格式，就需要根据需要进行了。一般说来，如果满足以下场景，就应该使用展开后的格式，而非打包格式：
1、需要在将来的某个时候更新应用程序中的部分内容；使用展开的格式可以避免重新deploy应用程序；
2、期望使用Tomcat Manager来动态编辑及选择deployment descriptor值；
3、应用程序中包含静态文件，而这些静态文件需要定期更新；


Deploy应用程序所涉及到的操作：
Deploy: 向tomcat实例提供某应用程序源文件，并让服务器将类加载进类加器中；这样，应用程序才可以为用户所使用；
Redeploy:用于更新deployment后的某应用程序或应用程序的部分内容；当redeploy整个应用程序时，当前应用程序的所有模块都必须要redeploy成功，否则整个webapp将会停止 ；
Stop: 卸载当前应用程序的所有类，并停止向用户提供服务；不过，其仍然会保留所有已deploy的文件及名称，并可用于后续的redeployment或starting；
Start: 装载当前应用的类至类加载器，并开启服务；
Undeploy: 停止某已经deploy的应用程序，并移除deploy产生的文件和名称；



Tomcat7 deploy应用程序的方法：
War格式的应用程序：将应用程序war文件放置于CATALINA_BASE目录中并重新启动tomcat；
没打包的应用程序：将应用程序的非归档文件旋转于CATALINA_BASE目录中；
Tomcat Manager：登录TM而后进行deploy；




Connector组件：
进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类：
Tomcat作为应用程序服务器：请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等；
Tomcat作为独立服务器：请求来自于web浏览器；

Tomcat应该考虑工作情形并为相应情形下的请求分别定义好需要的连接器才能正确接收来自于客户端的请求。一个引擎可以有一个或多个连接器，以适应多种请求方式。

定义连接器可以使用多种属性，有些属性也只适用于某特定的连接器类型。一般说来，常见于server.xml中的连接器类型通常有4种：
1) HTTP连接器
2) SSL连接器
3) AJP 1.3连接器
4) proxy连接器

如上面示例server.xml中定义的HTTP连接器：
<Connector port="8080" protocol="HTTP/1.1"
      maxThreads="150" connectionTimeout="20000"
      redirectPort="8443"/>
      
定义连接器时可以配置的属性非常多，但通常定义HTTP连接器时必须定义的属性只有“port”，定义AJP连接器时必须定义的属性只有"protocol"，因为默认的协议为HTTP。以下为常用属性的说明：
1) address：指定连接器监听的地址，默认为所有地址，即0.0.0.0；
2) maxThreads：支持的最大并发连接数，默认为200；
3) port：监听的端口，默认为0；
4) protocol：连接器使用的协议，默认为HTTP/1.1，定义AJP协议时通常为AJP/1.3；
5) redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口；
6) connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；
7) enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true；
8) acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；






catalina.sh
JAVA_OPTS="$JAVA_OPTS -Xmx2048M -Xms512M"


JVM: JVM堆

新生代：Eden, 存活区

新生代，老年代，持久代：
	GC：内存回收




只能通过API访问：分布式存储；
能挂载使用，在一定程度上兼容POSIX: 分布式文件系统；



每个存储节点称为一个host:
一个主机上可以有多个存储设备，每个设备都有ID号，devid；

