
（sudo）, (selinux), (rsync), dialog, （array）, advanced sed and awk, (rsyslog), busybox

数据结构：

kernel+busybox: bash+lib

android: kernel(bzImage)+busybox+JVM+
ios: FreeBSD kernel + object-c


Linux：RHCE（rh255），RHCA （RHS333）

OpenSSL （SSL/TLS）
OpenSSH  (SSH)
iptables/netfilter ()
FileServer
	NFS
	ftp
	samba
HTTP: apache(httpd)、nginx、varnish、haproxy
DNS: bind
应用程序服务：CGI, FastCGI, uwsgi, tomcat, jetty

	/etc/passwd: 
		grep

RDBMS, NoSQL, NewSQL
	MySQL: 5-7
	MongoDB
	Redis (memcached)
	Hadoop: HBase


DNS & Bind

DNS: Domain Name Service (System)

网络：MAC(Media Access Control), IP


1、海量客户端请求？
2、完成局部名称配置？

迭代查询
递归查询

缓存生存时间：ttl: time to live


原始服务器：权威答案
缓存：非权威答案

DNS服务器的类型：
	缓存DNS服务器
	主DNS服务器(master): 数据库更新由管理员手动完成
	辅助DNS服务器(slave)：数据库更新从主服务器或其它辅助DNS服务器那里完成

顶级域：
	顶级域：.net, .com, .org, .mil, .edu, .gov, .cc, .mobi
	国家域：.jp, .tw, .hk, .iq, .ir, .cn, .uk, .us
	反向域：FQDN <--> IP

DNS解析类型：
	正向解析：FQDN-->IP
	反向解析: IP --> FQDN


名称解析库：/var/named/
	文本文件(只能包含资源记录和宏定义): 每一行称作一个资源记录

	资源记录有类型：
		FQDN-->IPv4: A (Address)
		FQDN-->IPv6: AAAA
		Domain-->DNS Server：NS (Name Server)
		Domain-->Master DNS: SOA (Start Of Authority), 起始授权记录
		FQDN-->FQDN: CNAME (Canonical Name)
		IP-->FQDN: PTR (pointer)
		Domain-->Mail Server: MX (Mail eXchanger), 有优先级：0-99

DNS: FQDN --> IP
	根：.
IP --> FQDN：
	根：.in-addr.arpa.

域：domain
	正向解析：名称解析库
		区域：zone
	反向解析：名称解析库
		区域：zone

资源记录的格式：
name 	[ttl]	IN 		资源记录类型 	value

	例如：www.magelinux.com.		86400		IN 		A  	1.1.1.1

	各资源记录类型其“名称”有要求：
		SOA: zone
		NS: zone
		A, AAAA: FQDN
		CNAME: FQDN
		PTR: ReverseIP.in-addr.arpa.
		MX: zone

	各资源记录类型其“value”有要求：
		SOA: 主DNS服务器的FQDN
		NS: 对应DNS服务器的FQDN
		A,AAAA：IP
		CNAME：FQDN
		PTR：FQDN
		MX: Mail Server FQDN


SOA：
	@	[TTL] 	IN  FQDN  admin_mailbox  (
					2013081201   ;序列号, serial number
					2h           ;刷新时间, refresh time, 通知(notify): 只通知给本区域解析库文件中定义NS记录的所有主机；
					5m			 ;重试时间, retry time
					7d			 ;过期时间, expire time
					1d			 ;否定答案的ttl
	)	
	  				IN 		NS 	 ns1.magelinux.com.

	@  				nsadmin@test.com: nsadmin.test.com.




	FQDN IP

X --> Y

slave --> master
	完全区域传送：AXFR
	增量区域传送：IXFR


P, test.com.
X:dep1.test.com.
Y：dep2.test.com.


www.test.com
www.dep1.test.com.

子域授权记录：.com

test.com.		IN 		NS  	ns.test.com.
ns.test.com.   IN  	A       1.1.1.1




NS
A

解析类型：
	正向
	反向

查询类型：
	递归
	迭代

资源记录类型：
	A
	AAAA
	PTR
	MX
	NS
	SOA
	CNAME

DNS: SOA

@ 	ttl   IN  SOA  主DNS服务器FQDN  管理员邮箱  (
			序列号
			刷新时长
			重试时长
			过期时长
			否定回答的TTL
)

DNS：服务程序
	bind：Berkeley Internet Name Daemon
		ISC：www.isc.org
	powerdns

	bind4, bind8, bind9, bind10

nslookup nsupdate dig 

bind, named, dns

chroot /mnt/sysroot 
/mnt/sysroot/
	cd /etc

bind-chroot: named, /var/named/chroot/


root: named

系统用户：

服务：

ls:
named:
1、运行于后台，监听状态(listen)
2、

套接字：socket
	IP:Port
	named, 172.16.100.1:53<--

	端口：TCP:0-65535
		  UDP:0-65535

		 文件句柄：fd (file descriptor)

dns: tcp, 53; udp, 53


13个根：a.root-server.net
	    m.root-server.net

DNS服务器类型：
	缓存服务器
	主DNS服务器
	从DNS服务器

bind: test.com

bind: 
	主配置文件：named.conf，每个语句都要使用分号结尾；
		定义区域；
		定义各区域的全局配置；
		定义视图；
		定义日志；
	程序文件：/usr/sbin/named


dig命令：
	dig -t 资源记录类型  名称 @server-ip
		/etc/resolv.conf
			nameserver IP
	dig -x IP @server-ip
	dig +trace
	dig -t axfr zone

host命令：
	host -t 资源记录类型 名称

test.com. 
	172.16.100.X

www.test.com	172.16.100.6
dns.test.com  172.16.100.1
ftp.test.com  www.test.com
mail.test.com 172.16.100.2



named-checkconf: 
named-checkzone "zone_name" /path/to/zone_file



主配置文件/etc/named.conf的修改：注释掉options段中如下选项，也可以修改
	//listen-on port 53 { 127.0.0.1; };
	//listen-on-v6 port 53 { ::1; };
	//allow-query     { localhost; };

启动named服务：缓存DNS服务器; 


在区域配置文件/etc/named.rfc1912.zones新建一个区域：
	zone "区域名称" IN {
		type master|slave|forward;
		file "ZONE_NAME.zone";
	};

检测主配置文件语法错误：named-checkconf

在/var/named下建立“ZONE_NAME.zone”文件，通常只包含宏定义和资源记录，而第一个记录必须是SOA记录；
$TTL 600;
name  	[TTL]	IN 	RR_Type 	value

1、一个FQDN可对应同多个IP；(负载均衡)
2、多个FQDN可对应一个IP：(一台主机有多个名称)

检测区域文件语法错误：named-checkzone

确保主配置文件和各区域解析库文件的权限为640，属主为root，属组为named；





反向区域的区域名称：网络地址反过来.in-addr.arpa.

100.16.172.in-addr.arpa.




rndc：Remote Name Domain Contoller


如何创建从DNS服务器？
	如果有多台DNS服务器，必须为每个DNS服务器建立NS记录，否则主DNS将不向发送通知；

	区域定义：
	zone "区域名称" IN {
		type slave;
		file "slaves/ZONE_NAME.zone";
		masters { 
			MASTER_DNS_IP; 
			MASTER_DNS2_IP;
		};
	}


allow-transfer { IP; };



test.com.

.com: 服务器：


1、在DNS名称空间中注册域名；

a.com
b.net
.com: apnic: .com

2、在注册商提供的管理后台编辑建立资源记录；

3、www.godaddy.com

zone "." IN {
		type hint;
}


rndc: 953/tcp

调试：显示程序运行中的详细信息；
	调试级别：0，1，2，3

rndc trace
rndc trace LEVEL
rndc notrace

rndc flush

rndc reconfig
rndc reload


dig: flags aa 
	authority answer


magelinux.com


allow-transfer {};
allow-query {};
allow-recursion {};
allow-update {};
	ddns


bind访问控制列表：
	acl string { address_match_element; ... };


	any, none, local, localnet

如何实现将请求转发出去：

转发类型：

	转发所有针对非本机负责解析的区域的请求；
		options {};
	仅转发对特定区域的请求；
		zone {
			type forward;

		};

转发的前提：接收转发请求的服务器必须能够为请求者做递归查询；

	forwarders { IP; };
	forward only|first;



子域授权、acl、view、安全相关功能、转发域、日志子系统；

DNS子域授权：
	域内：划分出小域即为子域
	授权：委派

	划分子域
	完成授权

	test.com: 
		dep1.test.com
		dep2.test.com


	dep1.test.com.  	IN  NS 		dns.dep1.test.com.
	dns.dep1.test.com. 	IN  A   192.168.1.17

	dep2.test.com.	IN   NS     dns.dep2.test.com.
	dns.dep2.test.com.  IN   A    192.168.0.19





zone "." IN {
		type master;
}

zone "com" IN {
		type master;

}

zone 



项目案例：
以组为单位：
1、其中一位同学实现根域服务器，并完成对.com, .net, .org三个子域的授权；不允许递归；
2、第二位同学实现一级域.com, .net, .org的正向及反向解析；并完成test.com, test.net, magelinux.org三个子域的授权；不允许递归；
3、第三位同学实现对第二位同学的DNS服务器进行辅助；
4、余下的同学分别实现test.com, test.net和magelinux.com域的解析；给本地客户端递归；

要求：给出规划拓扑图
1、每位同学的根服务器named.ca文件的内容中，根要指向第一位同学建立的服务器；
2、本地客户端把服务器指向任一台，要能实现全网解析；


bind view: 视图
	brain split



view "" {
	match-clients { 172.16.0.0/16; };
	zone "test.com" IN {
		type master;
		file "internal"
	}

}


view VIEW_NAME {
	match-clients { any; }
	zone "test.com" IN {
		type master;
		file "external";
	}

}


172.16.0.0/16 www.test.com 172.16.100.3

192.168.1.0/24 www.test.com 192.168.1.3

bind: 

	MySQL, PostgreSQL

	www.dnspod.net
	www.dns.la

view {
	match-clients {};
	zone 
}

子域授权
转发
view

dnssec

dns log, queryperf, dnstop


benchmark: 
	queryperf: DDoS
	dnstop: tcpdump

bind:
	logging {


	}




file: /var/log/query.log

bind: 
	channel categroy
		categroy: 记录哪个功能产生的日志信息，一共内置有15种category；
		channel: 日志信息记录到何处，一般有两种形式，一种为file，另一种为syslog；同时，还需要指定日志级别；

		一个category产生的日志可以发往多个channel；而一个channel只能为一个category记录日志；

	channel CHANNEL_NAME {
		file /path/to/somefile|syslog facility;
		severity LEVEL; 
	};

	category CATEGORY { CHEANNEL; };


bind: 

脚本配置文件：


编译安装named:

1、解析程序包
# ./configure --prefix=/usr/local/bind9 --sysconfdir=/etc/named --enable-threads --enable-epoll --disable-ipv6 --disable-chroot
# make
# make install

# useradd -r named
# chown -R named:named /usr/local/bind9/var/run

echo 'export PATH=/usr/local/bind9/bin:/usr/local/bind9/sbin:$PATH' > /etc/profile.d/bind9.sh

2、主配置文件/etc/named/named.conf样例：
options {
	directory "/var/named";
	pid-file "/usr/local/bind9/var/run/named.pid";
};

zone "." IN {
	type hint;
	file "named.ca";
};

zone "localhost" IN {
	type master;
	file "localhost.zone";
	allow-update { none; };
};

zone "0.0.127.in-addr.arpa" IN {
	type master;
	file "named.local";
	allow-update { none; };
};

3、生成rndc.conf
# rndc-confgen > /etc/named/rndc.conf

把配置文件后N行复制到named.conf，并移除注释；

4、在区域解析库文件
# dig -t NS . @172.16.0.1 > /var/named/named.ca
# 
# 


5、建立服务脚本

#!/bin/bash
# chkconfig: 2345 70 50
# description: named

[ -r /etc/rc.d/init.d/functions ] && . /etc/rc.d/init.d/functions

PidFile=/usr/local/bind9/var/run/named.pid
LockFile=/var/lock/subsys/named
named=named

start() {
	[ -x /usr/local/bind9/sbin/$named ] || exit 4
 	if [ -f $LockFile ]; then
	   	echo -n "$named is already running..."	
		failure
		echo
		exit 5
	fi

	echo -n "Starting $named: "
	daemon --pidfile "$PidFile" /usr/local/bind9/sbin/$named -u named -4
	RETVAL=$?
	echo
	if [ $RETVAL -eq 0 ]; then
  		touch $LockFile
		return 0
	else
		rm -f $LockFile $PidFile
		return 1
	fi
}

stop() {
	if [ ! -f $LockFile ];then
  		echo "$named is not started."
		failure
	fi

	echo -n "Stopping $named: "
	killproc $named
	RETVAL=$?
	echo
	[ $RETVAL -eq 0 ] && rm -f $LockFile
	return 0
}

restart() {
	stop 
	sleep 2
	start
}

reload() {
	echo -n "Reloading $named: "
	killproc $named -HUP
	RETVAL=$?
	echo
	return $RETVAL
}

status() {
	if pidof $named > /dev/null && [ -f $PidFile ]; then
 		echo "$named is running..."
	else
		echo "$named is stopped..."
	fi
}

case $1 in
start)
	start  ;;
stop)
	stop ;;
restart)
	restart ;;
reload)
	reload ;;
status)
	status ;;
*)
	echo "Usage:"
	exit 2 ;;
esac



博客要求：
1、缓存服务器；
2、主服务器
3、辅助服务器
4、子域授权；
5、acl和view；
6、日志系统的使用；



DHCP：Dynamic Host Configuration Protocol

bootp: boot protocol
	无盘工作站：PC

	bootp --> dhcp
		lease

	dhcp: udp报文, 
		dhcp client: 68/udp
		dhcp server: 67/udp

dhcp client: dhcp discover
dhcp server: dhcp offer
dhcp client: dhcp request
dhcp server: dhcp ack

dhcp lease: 8H
	50%-->4H-->8H
		dhcp request
		dhcp ack

	50%-->4H-->50%(75%)-->6H-->50%(87.5%)-->7H
	dhcp discover

网络配置：
	ip/netmask
	gateway
	dns server

DHCP保留地址：
	MAC：






dhcp: dhcpd, dhcrelay
/etc/dhcp/dhcpd.conf




172.16.100.1

服务器端配置文件：/etc/dhcp/dhcpd.conf
	subnet SUBNET {
		range
		option routers
		option domain-name-servers
	}

	host HOST_ID {
		hardware ethernet MAC;
		fixed-address IP;
	}

服务器端租约保存位置:/var/lib/dhcpd/dhcpd.leases

客户端测试获取地址的命令：dhclient -d



OpenSSL, sudo, OpenSSH, NFS, vsftpd

DNS：子域授权
	1、NS：子域内的每一台DNS服务器；
	2、A：glue record

DNS: view
	test.com: 
		www.test.com:
			Unicom: 
			Telecom:

	所有的zone位于view
		match-clients {};

DNS: logging
	channel: file|syslog
	category: 哪个子系统产生的日志, 15

DNS: 编译安装, SysV脚本
	functions: success, failure, daemon, killproc

DHCP: 
	server: 67/udp
	client: 68/udp

	subnet 
		range

	host {

	}



OpenSSL: 
	
加密、解密：
	明文：
		移位：a-->d, 
			are, 

			转轮机：

	明文-->密文--------------------->密文-->解密
		encryption					dec

网络安全的三个关键目标：
	机密性：
	完整性：
	可用性：



对称加密: 加密算法（密钥）
	分组加密：20M

	NAST：DES (Data Encryption Standard)
		  3DES: 
		  AES (Advanced ): 128, 192, 256

非对称加密：
	数学函数
		费马小定理，欧拉定理

	DH: 密钥交换算法

	Bob --> Alice
	x        y
	x,y      x,y
	p,       q
	x^p%y -->
		<-- y^q%x

	相同的结果：即为最后双方选择使用的密钥

a^p%p=a

x, p
x^p%p=x
y, p
y^p%p=y


费马小定理是数论中的一个重要定理，其内容为： 假如p是质数，且(a,p)=1，那么 a^(p-1) ≡1（mod p） 假如p是质数，且a,p互质，那么 a的(p-1)次方除以p的余数恒等于1


欧拉定理得名于瑞士数学家莱昂哈德·欧拉，该定理被认为是数学世界中最美妙的定理之一。欧拉定理实际上是费马小定理的推广。

在数论中，欧拉定理,（也称费马-欧拉定理）是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互质，(a,n) = 1，则a^φ(n) ≡ 1 (mod n)。

推论：对于任意正整数a，有a^p ≡ a (mod p)，因为a能被p整除时结论显然成立。


非对称加密：
	私钥：s
	公钥：p
		公钥是从私钥提取而来；

	私钥加密的数据 --> 与之配对的公钥解密
	公钥加密的数据 --> 与之配对的私钥解密

	Bob, Alice
		Bob：使用自己的私钥加密的数据，bob公钥; 身份验正
		Bob: 用Alice的公钥加密; 数据机密性

	三个数量级：10^3

	非对称加密的功能：
		身份验正
		机密性
		密钥交换

	身份验正：
		发送方：使用自己的私钥加密，对

单向加密：
	仅支持：从明文-->密文
	提取数据的特征码：哈希计算，散列计算
		定长输出：
			md5:128
			sha1:160
			sha256
			sha512
		雪崩效应：
			输入数据的微小改变会引起输出结果的巨大变化；


		数据完整性:
			发送方-->数据+特征码-->

		数字签名：发送方使用单向取得数据特征码，并使用自己的私钥加密此段特征码的操作；

总结：
	对称加密：DES, 3DES, AES
			机密性
	非对称加密(公钥加密)：RSA, DSS, ECC
		512, 768, 1024, 2048, 4096, 8192
			身份验正
			密钥交换
			机密性
	单向加密：MD5, SHA1, SHA2, SHA256, SHA512, SHA3
			数据完整性

	IKE：DH, ElGamal
		q:素数
		a:原根

	Bob     Alice
	Xm		Xn

	Bob: a^Xm%q --> Alice
	Alice: a^Xn%q --> Bob

	Bob: (a^Xn%q)^Xm%q = a^XnXm%q
	Alice: (a^Xm%q)^Xn%q = a^XmXn%q

	1、发送方使用选定的单向加密算法计算原始数据的特征码；
	2、发送方使用自己的私钥加密特征码，附加于原始数据后面；
	3、发送方生成一次性对称密钥，并使用此密钥加密数据(原始数据+加密后的特征码)；
	4、发送方使用接收方的公钥加密一次性对称密钥，附加于加密数据后面
	5、发送；

	1、接收方使用自己的私钥解密加密的一次性对称密钥；
	2、使用对称密钥解密数据，得到加密的特征码和原始数据；
	3、使用发送方的公钥解密加密的特征码；
	4、使用与发送方相同的单向加密算法重新计算数据的特征码，并与解密出的特征做比较

公钥分发：

数字证书：x.509v3
	版本号(version)
	序列号():证书本身在CA中惟一标识；
	签名算法标志
	发行者名称
	有效期：
	证书主体名称：(组织(主机),个人)
	证书主体公钥信息：
	发行商惟一标志 
	证书主体的惟一标志
	扩展：
	签名：




PKI: Public Key Infrastructure
	端实体(申请者)
	注册机构(RC)
	签证机构(CA)-->签证机构(CA)
	证书撤消列表(CRL)发布机构
	证书存取库


web: http, (明文)
远程登录：telnet, (明文)
邮件：smtp, pop3, imap4 (明文)

ssl/tls: 
vpn:
ssh:


ssl: Secure Socket Layer
	http: 80/tcp   https: 443/tcp
	ftp: 21/tcp    ftps:  
	smtp: 25/tcp   smtps: 465/tcp
	pop3: 110/tcp  pops: 995/tcp

	starttls: ldap

	ssl v1, v2, v3
tls: Transport Lanyer Security
	tls v1,

https:

OpenSSL:
	libcrypto: 加密、解密
	libssl: 实现ssl
		httpd, mod_ssl, 
	openssl: 
		# openssl version
		# openssl enc -des3 -in /path/to/somefile -e -out /path/to/somefile.des3
		# openssl enc -des3 -in /path/to/somefile.des3 -d -out /path/to/somefile

		# openssl dgst -md5 -hex /path/to/somefile
		# md5sum 

		# openssl speed 


		# man sslpasswd
		# openssl passwd -1 -salt 

		# openssl rand -base64 num
		# openssl rand -hex num

	生成私钥：
		# openssl genrsa 2^n > /path/to/keyfile
		# openssl genrsa -out /path/to/keyfile 2^n

		# (umask 077; openssl genrsa -out /root/mykey2.pri 2048)

	提取公钥：
		# openssl rsa -in /path/to/keyfile -pubout

如何申请证书：
	1、生成一个私钥；
	2、制作一个证书签署请求；
	# openssl req -new -key /path/to/private_key -out /paht/to/certificate.csr 

	3、由CA负责签署证书；

如何自建CA：
# cd /etc/pki/CA/
1、为CA生成一个私钥：
	# (umask 077; openssl genrsa -out private/cakey.pem 2048)
2、生成自签证书：
	# openssl req -new -x509 -key private/cakey.pem -out cacert.pem -days 365
	# touch index.txt
	# echo 01 > serial
3、签署证书：
	# openssl ca -in /path/to/certreq.csr -out /path/to/certfile.crt -days 365

专用客户端测试工具：
# openssl s_client -connect HOST:PORT -CAfile /path/to/cacertfile|-CApath /paht/to/cacertfiles_dir/ -ssl2|-ssl3|-tls1 


脚本作业：
1、自建CA；
2、证书签署；

总结：
1、openssl: libssl, libcrypto, openssl
2、openssl 
	加密、解密： enc
	信息摘要：dgst
	生成私钥、提取公钥：genrsa
	制作证书签署请求、自建CA：req
	签署：ca


openssl中有如下后缀名的文件
.key格式：私有的密钥
.crt格式：证书文件，certificate的缩写
.csr格式：证书签名请求（证书请求文件），含有公钥信息，certificate signing request的缩写
.crl格式：证书吊销列表，Certificate Revocation List的缩写
.pem格式：用于导出，导入证书时候的证书的格式，有证书开头，结尾的格式
 
常用证书协议
x509v3: IETF的证书标准
x.500:目录的标准
SCEP:  简单证书申请协议，用http来进行申请，数据有PKCS#7封装，数据其实格式也是PKCS#10的
PKCS#7:  是封装数据的标准，可以放置证书和一些请求信息
PKCS#10:  用于离线证书申请的证书申请的数据格式，注意数据包是使用PKCS#7封装这个数据
PKCS#12:  用于一个单一文件中交换公共和私有对象，就是公钥，私钥和证书，这些信息进行打包，加密放在存储目录中，CISCO放在NVRAM中，用户可以导出，以防证书服务器挂掉可以进行相应恢复。思科是.p12,微软是.pfx


su - USERNAME
su -l USERNAME

Tom:
Jerry:

sudo
/etc/sudoers:
	授权文件

	who 

# useradd gentoo

$ sudo /usr/sbin/useradd gentoo

who		where=(whom)   command


root	ALL=(ALL) 	ALL
user  ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom

USERADMINS

sudo授权用户：
	# sudo -l
	# sudo COMMAND

%GroupName：对组中所有用户进行sudo授权；

sudoers文件支持使用别名对同类对象进行分组：组名必须使用全大写字母
Host_Alias
User_Alias
Runas_Alias
Cmnd_Alias

标签：
	NOPASSWD:
	PASSWD:


练习：让jerry用户能够以root用户身份在通过本地网络内的主机执行ifconfig、route、netstat、ss命令；


语法

sudo [-bhHpV][-s ][-u <用户>][指令]
或
sudo [-klv]
参数
　　-b 　在后台执行指令。
　　-h 　显示帮助。
　　-H 　将HOME环境变量设为新身份的HOME环境变量。
　　-k 　结束密码的有效期限，也就是下次再执行sudo时便需要输入密码。
　　-l 　列出目前用户可执行与无法执行的指令。
　　-p 　改变询问密码的提示符号。
　　-s 　执行指定的shell。
　　-u <用户> 　以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份。
　　-v 　延长密码有效期限5分钟。
　　-V 　显示版本信息。
	-S   从标准输入流替代终端来获取密码


bash编程之数组：
	变量：
		变量名：内存地址

season1="Spring"
season2="Summer"
season3="fall"
season4="winter"

声明：declare -i 
	declare -a Season

数组赋值：
方法1
	Season=("element1" "element2")
方法2：
	Season=([0]="element1" [3]="element4")
方法3：
	Season[0]="element1"
	Season[2]="Fall"

引用数组元素：
	${array[index]}

bash v4及后续的版本支持关联数组：
	数组下标可以使用字符串
	declare -A Season

# Season=([one]="Spring" [two]="Summer" [three]="Fall" [four]="Winter")
# echo ${Season[two]}
Summer

练习：把所有同学的名字保存至某数组中，随机挑选一个回答问题。


进一步：随机挑选2个回答问题；
两种思路：
	目标数组
	标志位数组



CA, PKI:

证书：

bind: dnssec, tsig

openssl: libcrypto, libssl, openssl
	enc, version, speed, genrsa, rsa, req, ca, passwd, rand, dgst




OpenSSH:
	ssh: Secure SHell, telnet
	telnet --> ssh v1 --> v2

	C/S: openssh(程序，是ssh协议的实现)、dropbear
		sshd, ssh

windows ssh client:
	xmanager --> xshell
	securecrt
	putty
	sshclient

openssh:
	用户认证：
		基于口令的认证：username/password
		基于密钥的认证：username	 

openssh:
	sshd, ssh

	/etc/ssh/
		sshd_config
		ssh_config
			ssh v1:
				ssh_host_key, ssh_host_key.pub
			ssh v2:
				ssh_host_dsa_key  
				ssh_host_dsa_key.pub

				ssh_host_rsa_key  
				ssh_host_rsa_key.pub

	~/.ssh/


监听的端口：22/tcp

syslog: 
	facility
	priority

	kern.info

kerberos

总结：
1、监听端口改为非22端口；
	honeypot
2、启用基于密钥认证的功能；
3、禁止使用version 1；
4、禁止主机认证机制；默认即为禁止；
5、禁止DNS反解；
6、禁止显示LastLogin；
7、显示banner以提示用户；但在banner中勿显示敏感信息；

ssh :
	ssh HOST: 以登录到当前主机上的用户名为用户登录远程主机；
	ssh username@HOST
	ssh -l username HOST

	ssh username@HOST 'COMMAND'
		-p port

scp:
	基于ssh协议，在主机之间安全实现文件复制的工具；
	scp SOURCE DESTINATION
		username@HOST:/path/to/somewhere

	scp root@172.16.100.12:/etc/fstab  /tmp/
	scp /etc/fstab root@172.16.100.12:/tmp/
		-r
		-a
		-p




基于密钥认证：
	1、在本地：生成一组密钥；
		# ssh-keygen -t rsa
			-P 'passphrase'
			-f 'outfile_key'
	2、将公钥传输至远程主机，并保存至目标用户家目录下的.ssh/authorized_keys文件中；
		# ssh-copy-id -i /PATH/TO/RAS_PUBKEY username@HOST


OpenSSH:

Default Config Files and SSH Port

/etc/ssh/sshd_config - OpenSSH server configuration file.
/etc/ssh/ssh_config - OpenSSH client configuration file.
~/.ssh/ - Users ssh configuration directory.
~/.ssh/authorized_keys or ~/.ssh/authorized_keys - Lists the public keys (RSA or DSA) that can be used to log into the user’s account
/etc/nologin - If this file exists, sshd refuses to let anyone except root log in.
/etc/hosts.allow and /etc/hosts.deny : Access controls lists that should be enforced by tcp-wrappers are defined here.
SSH default port : TCP 22


使用SSH的最佳实践：
1、Only Use SSH Protocol 2
2、Limit Users' SSH Access
	AllowUsers root vivek jerry
		白名单
	DenyUsers saroj anjali foo
		黑名单
3、Configure Idle Log Out Timeout Interval
	ClientAliveInterval 300
	ClientAliveCountMax 0
	设定空闲会话超时时长；

4、Firewall SSH Port # 22
	使用iptables设置ssh服务安全访问策略；

5、Change SSH Port and Limit IP Binding
	Port 300
	ListenAddress 192.168.1.5
	ListenAddress 202.54.1.5

	勿使用默认22端口；

6、Use Strong SSH Passwords and Passphrase
	genpasswd() {
		local l=$1
	       	[ "$l" == "" ] && l=20
	      	tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
	}

	使用足够长、足够复杂的密码，且定期更换；

7、Use Public Key Based Authentication
	使用公钥认证

8、Disable Empty Passwords
9、Thwart SSH Crackers (Brute Force Attack)
	google: ssh best practice
10、 Rate-limit Incoming Port # 22 Connections
	限制ssh访问频度；
11、Use Log Analyzer
	记录好日志，经常做日志分析；



随机数：
	伪随机数：使用软件模拟的方式生成随机；/dev/random
	随机数：熵池，/dev/urandom


ssh总结：
	1、最佳实践；
	2、知识点：
		sshd_config
		基于密钥认证和基于口令认证；
		ssh, scp, sftp


dropbear: lightweight ssh2



make PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp"
make PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp" install
 

dropbear: sshd
dbclient: ssh
dropbearkey 







mkdir /etc/dropbear
/usr/local/bin/dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
/usr/local/bin/dropbearkey -t rsa -s 4096 -f /etc/dropbear/dropbear_rsa_host_key


#!/bin/bash
#
# chkconfig: 2345 75 50
# description: lightweight ssh2 implementation
#
[ -r /etc/rc.d/init.d/functions ] && . /etc/rc.d/init.d/functions

[ -f /etc/sysconfig/dropbear ] && . /etc/sysconfig/dropbear

dsskey=/etc/dropbear/dropbear_dss_host_key
rsakey=/etc/dropbear/dropbear_rsa_host_key

pidfile=/var/run/dropbear.pid
lockfile=/var/lock/subsys/dropbear

dropbearkey=/usr/local/dropbear/bin/dropbearkey
dropbear=/usr/local/dropbear/sbin/dropbear

port=${port:=22}

gendsskey() {
	if [ ! -f $dsskey ]; then
		$dropbearkey -t dss -f $dsskey &> /dev/null
	#	[ $? -eq 0 ] && return 0 || return 1
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		echo -n "Generate dss key finished."
		passed
		echo
		return 0
	else
		echo -n "Genrate dss key failed"
		failure
		echo
		exit 6
	fi
	else
		return 0
	fi
}
		
genrsakey() {
	if [ ! -f $rsakey ]; then
		$dropbearkey -t rsa -f $rsakey -s 2048 &> /dev/null
	#	[ $? -eq 0 ] && return 0 || return 1
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		echo -n "Generate rsa key finished."
		passed
		echo
		return 0
	else
		echo -n "Genrate rsa key failed"
		failure
		echo
		exit 6
	fi
	else
		return 0
	fi
}

start() {
	gendsskey
	genrsakey 

	if [ -f $lockfile ]; then
		echo -n "dropbear is already running."
		failure
		echo
		exit 7
	fi

	echo -n "Start dropbear"
	daemon --pidfile $pidfile $dropbear -p $port
	RETVAL=$?
	echo 

	if [ $RETVAL -eq 0 ];then
		touch $lockfile
		return 0
	else
		rm -f $lockfile $pidfile
		return 1
	fi
}

stop() {
	if [ ! -f $lockfile ]; then
		echo -n "dropbear is not running."
		failure
		echo
		exit 8
	fi

	echo -n "Stop dropbear:"
	killproc dropbear	
	RETVAL=$?
	echo

	[ $RETVAL -eq 0 ] && rm -f $lockfile && return 0 || return 1
}

case $1 in 
start)
	start ;;
stop)
	stop;;
restart)
	stop 
	start ;;
*) 
	exit 3 ;;
esac



回顾：ssh, 协议
	openssh, dropbear, 实现
	openssh: /etc/ssh 
		sshd: sshd_config
		ssh: ssh_config

	基于口令
	基于密钥
		id_rsa, id_rsa.pub

		~/.ssh/authorized_keys



文件共享服务：
	文件级别：
		nfs: network file system
		samba: smb, 在Linux实现cifs,
			smbd, nmbd, winbindd
		ftp: 应用层协议

	rpc: Remote Procedure Call
		远程过程调用
			过程、函数

		函数调用：

		rhel5: portmap 
		rhel6: rpcbind

	NFS: 
		v1: Sun Solaris, SunOS
		v2: udp
		v3: kerberos，只有部分认证功能能调用kerberos, udp/tcp
		v4: kerberos

client --> nfs --> nfsd (rpc) 


NFS服务：
	认证功能：不认证用户，认证主机

	服务脚本：/etc/rc.d/init.d/nfs
	配置文件: /etc/exports
		导出的文件系统

		nfsd: 2049/tcp, 2049/udp

		rpc服务监听的商品是半随机：
			111

		rpcinfo -p HOST



在RHEL6中，使用rpcbind替换了RHEL5中NFS依赖的portmap服务。另外，RHEL6上已经同时支持NFSv2,NFSv3,NFSv4客户端，默认是NFSv4客户端了。


Each entry for an exported file system has the following structure:
	export host(options)
	/data  172.16.0.0/16(rw)

The aforementioned structure uses the following variables:
export
	The directory being exported
host
	The host or network to which the export is being shared
options
	The options to be used for host

You can specify multiple hosts, along with specific options for each host. To do so, list them on the same line as a space-delimited list, with each hostname followed by its respective options (in parentheses), as in:
	export host1(options1) host2(options2) host3(options3)



The host(s) can be in the following forms:
Single machine
	A fully-qualified domain name (that can be resolved by the server), hostname (that can be resolved by the server), or an IP address.
Series of machines specified via wildcards
	Use the * or ? character to specify a string match. Wildcards are not to be used with IP addresses; however, they may accidentally work if reverse DNS lookups fail. When specifying wildcards in fully qualified domain names, dots (.) are not included in the wildcard. For example, *.example.com includes one.example.com but does not include one.two.example.com.
IP networks
	Use a.b.c.d/z, where a.b.c.d is the network and z is the number of bits in the netmask (for example 192.168.0.0/24). Another acceptable format is a.b.c.d/netmask, where a.b.c.d is the network and netmask is the netmask (for example, 192.168.100.0/255.255.255.0).
Netgroups
	Use the format @group-name, where group-name is the NIS netgroup name.


客户端命令：
	showmount
		-e HOST：显示服务器上共享的NFS文件系统列表

服务端命令：
	showmount
		-d: 显示当前主机所共享的NFS文件系统中，有哪些已经被客户端挂载
		-a: 显示当前主机所共享的NFS文件系统中，每个挂载连接；

	exportfs
		-r: reexport，重新导出
			-ra
		-a: 操作所有文件系统
		-u: 取消导出
			-ua
		-v: 显示详细信息

idmapd: centos, 500

nfs共享选项：
	rw: 读写
	ro: 
	secure: 默认已经启用；限制客户端只能使用小于1024的端口访问请求；若不加限制，则使用insecure
	async: 异步写入，性能好，数据可靠性差；
	sync: 同步写入，性能差，数据可靠性高；
	wdelay: 写入延迟；no_wdelay
	nohide: 不隐藏要导出的目录中挂载的其它nfs；
	no_acl: 关闭nfs的acl功能；
	root_squash: 压缩root权限, nfsnobody
	no_root_squash: 不压缩root权限
	all_squash：所有用户都压缩
	anonuid=nfsuser,anongid=nfsgroup：使用指定的用户帐号做匿名用户帐号；

使用固定端口：要编辑/etc/sysconfig/nfs配置文件实现

总结：
	nfs: 
	nfs-utils
	/etc/rc.d/init.d/nfs
	/etc/exports
	export host(options) host(options)
	rpcinfo, showmount, exportfs



/data/backup: 挂载的其它nfs

/data, 

案例：



FTP: 
	ftp: 应用层, C/S

	ftp协议：
		两类连接
			命令连接：21/tcp
			数据连接：
				主动模式:
					20/tcp
				被动模式:
					随机端口

			数据传输模式：
				二进制: 110, 8bits
				文本：110, 24bits

ftp: wuftpd, proftpd, pureftp, vsftpd(very secure), filezilla
	Windows: Serv-U, IIS

	Client: ftp, lftp, gftp(linux), filezilla, flashfxp, cuteftp, leapftp

协义响应码：
1xx: 服务器信息
2xx: 正确响应信息
3xx: 正常响应，某操作过程尚未完成，需进一步补充完成；
4xx: 客户端错误;
5xx: 服务器端错误;

ftp服务器端文件路径是用户家目录：

vsftpd的用户类型：
	匿名用户: 事实上是服务器端自动映射的一个系统用户；
	本地用户：/etc/passwd中的用户 
		默认root和id号小于500的用户都禁止访问ftp；
	虚拟用户：事实上是服务器端自动映射的一个系统用户；
		多个虚拟用户同时被映射为同一个系统用户，但不同的虚拟用户可以具有不同的访问权限；

vsftpd:
	服务脚本：/etc/rc.d/init.d/vsftpd
	主配置文件：/etc/vsftpd/vsftpd.conf
	执行程序：/usr/sbin/vsftpd

vsftpd的工作特性：


	chroot: 禁锢用户于其家目录中，实现方式有两种：
		1、禁锢所有用户：
			chroot_local_user=YES
		2、禁锢指定用户，黑名单 
			chroot_list_enable=YES
			chroot_list_file=/etc/vsftpd/chroot_list 
		3、不禁锢指定用户，白名单
			chroot_local_user=YES			
			chroot_list_enable=YES
			chroot_list_file=/etc/vsftpd/chroot_list 

	user_list：ftp用户白名单和黑名单：
		1、白名单：
			userlist_enable=YES
			userlist_deny=NO
		2、黑名单：
			userlist_enable=YES
			userlist_deny=YES

	传输速率限定，默认单位为字节：
		anon_max_rate=
		local_max_rate=

		user_config_dir=/etc/vsftpd/userconfs/

	连接数限定：
		max_clients=100
		max_per_ip=2

sftp: ssh
ftps: ssl
	
ssl_enable=YES
ssl_tlsv1=YES
ssl_sslv2=YES
ssl_sslv3=YES
allow_anon_ssl=NO
force_local_data_ssl=YES
force_local_logins_ssl=YES
rsa_cert_file=/etc/vsftpd/ssl/vsftpd.crt
rsa_private_key_file=/etc/vsftpd/ssl/vsftpd.key


在服务器上执行：
# tcpdump -i eth0 -XX port 21


NFS:
	nfsd: tcp, udp, 2049
	rpc: mountd, idmapd
		nfsv4: 

/etc/exports
export_fs	client_list(options) client_list(options)
	root_squash
	all_squash
	anonuid, anongid
	no_root_squash
	async
	sync

ftp: 
	主动连接：20 --> 
	被动连接：client --> 随机端口(110,20)

	PORT, PASS

	vsftpd: 
		chroot_local_user=YES
		anon_max_rate=


web:
	http: HyperText Transfer Protocol: 超链接
		文本
	html: HyperText Mark Language
	<html>
		<title> </title>

		<body> 
			<h1> </h1>

		</body>
	</html>

	80/tcp

	c/s
		client: browser
		server: httpd, nginx, lighttp, thttpd

	http: 应用层协议
		request报文
		response报文
		请求<-->响应
			http/0.9
				get
				动态端点：
					客户端动态：
						applet
					服务器端动态：
						CGI: Common Gateway Interface

			web资源：
				web object
					70


			http/0.9: stateless
			http/1.0: MIME, keep-alive (保持连接), 缓存
				Multipurpose Internet Mail Extesions, smtp, base64
				MIME：
					major/minor
					image/jpg
					image/gif
					text/html
					video/quicktime
					appliation/x-httpd-php
			http/1.1: 更多的请求方法，更精细的缓存控制，持久连接(persistent connection)

	URI: Uniform Resource Identifier
		URL：Uniform Resource Locator
			scheme://[username:password@]HOST:port/path/to/source
				http://www.test.com/downloads/nginx-1.5.tar.gz
					网页文件：文件系统有一个存放位置，假如/www/html
		URN：

	HTTP事务：一个请求以及与其对应的响应报文

	HTTP方法：
		GET: 完整请求一个资源
		HEAD: 仅请求响应首部
		POST：提交表单
		PUT: (webdav)
		DELETE：(webdav)
		OPTIONS：返回请求的资源所支持的方法的方法
		TRACE: 追求一个资源请求中间所经过的代理

	HTTP缓存机制：
		私有缓存
		公共缓存

	HTTP的响应码：
		1xx: 信息性状态码
			100, 101
		2xx: 成功状态码
			200：OK
		3xx: 重定向状态码
			301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向; 
			302: 临时重定向，显式重定向, Location响应首部的值为新的URL
			304：Not Modified
		4xx: 客户端错误状态码
			404: Not Found
		5xx: 服务器端错误状态码
			500: Internal Server Error
			502: Bad Gateway
			504：Gateway Timeout

	HTTP报文格式：
		起始行
		首部：Host: www.test.com
		主体

		request: 
			<method> <request-URL> <version>
			<headers>

			<entity-body>

		response:
			<version> <status> <reason-phrase>
			<headers>

			<entity-body>

		version: HTTP/major.minor, 如HTTP/1.0


	HTTP报文首部：
		通用首部：请求和响应均可使用
			Connection: 
			Date: 
			Via: 所经过的代理服务器

		请求首部：
			Host: 所请求的主机
			Referer: 提供了包含当前请求URI文档的URL
			Accept: 接受的MIME类型
			Accept-Charset:
			Accept-Encoding: 
			Accept-Lanague: 告诉服务器能够发送哪些语言

			条件请求首部：
				If-Modified-Since
				If-None-Match

			安全请求首部：
				Authorization: 客户端提供给服务器的认证信息；
				Cookie: 
				Cookie2:

		响应首部：
			Age: 
			Server: 服务器软件名称及版本
			Vary: 
			Set-Cookie
			Set-Cookie2

		实体首部:
			Allow: 允许的请求方法
			Location: 资源的实际位置
			Content-Language: 
			Content-Location: 
			Content-Type: MIME

			ETag: 实体标记
			Expires: 
			Last-Mofified：

echo '<html>'
	echo '<title>'
		echo '<h1>'
			echo 'hello there!'
		echo '</h1>'
	echo '</title>'
echo '</html>'

MVC: 


一次HTTP事务的完成过程：
	1、建立连接
	2、接收请求
	3、处理请求
	4、获取资源
	5、构建响应
	6、回送响应
	7、记录日志


web服务器软件：
	httpd: (apache)， a patchy server, 
		ASF: Apache Software Foundation
			tomcat
			cassandra
			hadoop
			cloudstack
			lucene
	nginx: 
	lighttpd:
	IIS: 

web浏览器：
	IE
	chrome
	firefox
	opera
	safari
	elinks
	curl 


httpd: 
	高度模块化: DSO
	MPM：Multipath Processing Module
		prefork: 一个进程响应一个请求
		worker：一个进程生成多个线程，一个线程响应一个请求
		event：事件驱动模式

	httpd-1.3
	httpd-2.0
	httpd-2.2
	httpd-2.4

httpd: 
	alias
	auth
	virtual host
	mpm


知识回顾：
	HTTP方法：GET, HEAD; POST, PUT, DELETE; OPTIONS, TRACE

	HTTP事务：
		HTTP请求报文：
			<method> <request-URL> <version>
			<headers>

			<entity-body>

		HTTP响应报文：
			<vesrion> <status> <reason-phrase>
			<headers>

			<entity-body>

	HTTP/0.9, HTTP/1.0, HTTP/1.1


httpd的相关信息：
	服务脚本：/etc/rc.d/init.d/httpd
	运行目录：/etc/httpd
	配置文件：/etc/httpd/conf/
			主配置文件：httpd.conf
			扩展配置：/etc/httpd/conf.d/*.conf
	socket: http: 80/tcp, https: 443/tcp
	网页文件目录(DocumentRoot)：/var/www/html
			CGI: /var/www/cgi-bin/



默认主页面：index.html

配置httpd的工作属性：
	指令不区分字符大小写，但约定俗成的习惯：单词的首字母大写；指令的值很有可能区分大小写；有些指令可以重使用多次; 

	配置文件的构成：主服务器和虚拟主机不能同时启用
		全局配置：对主服务器或虚拟机都有效，且有些功能是服务器自身工作属性；
		主服务器：主站属性；
		虚拟主机：虚拟主机及属性定义

	配置文件语法测试：
		# service httpd configtest
		# httpd -t

		大多数配置修改后，使用service httpd reload即能生效；而修改监听的地址和端口通常需要重启服务；

	1、配置监听的地址和端口；
		Listen [IP:]PORT

	2、配置所选用的MPM的属性
		配置使用编译进不同MPM的httpd，编辑/etc/sysconfig/httpd配置文件，定义如下行：
			HTTPD=/usr/sbin/httpd.worker
		MPM：多道处理模块
			prefork: 一个进程响应一个请求；
				主进程功能
					(1) 绑定特权端口；
					(2) 派发或回收子进程；
					(3) 读取分析主配置文件；
			worker：一个进程生成多个线程，一个线程响应一个请求；
			event

	3、配置服务器支持keep-alived
		KeepAlive {On|Off}
		KeepAliveTimeout 2
		MaxKeepAliveRequests 50

	4、配置加载的模块
		LoadModule foo_module modules/mod_foo.so

	5、配置站点根目录
		DocumentRoot ""
		<Directory "FS_PATH">
		</Directory>

		<Location "URL">
		</Location>

		/var/www/html/images/logo.jpg
		http://www.test.com/images/logo.jpg

	6、配置页面文件访问属性
		<Directory "FS_PATH">
			Options 
				Indexes: 是否允许索引页面文件,建议关闭；
				FollowSynLinks: 是否跟随软链接文件；
				SymLinksifOwnerMatch:
				ExecCGI：是否允许执行CGI脚本; 
				All
				None
		</Directory>

	7、访问控制
		基于客户端访问控制:
			Order：定义allow和deny哪个为默认法则；写在后面的为默认法则：写在前面的指令没有显式定义的即受后面的指令控制；
			    Order allow,deny
			    Deny from 172.16.100.177
    			Allow from 172.16.0.0/16
		基于用户访问控制

	8、userdir
		让每个都拥有个人站点：http://HOST/~username/
			UserDir public_html

	9、定义默认主页面：
		DirectoryIndex	index.php index.jsp index.html

	10、配置日志功能
		日志有两类：访问日志(格式需自定义)、错误日志

		错误日志：
			ErrorLog "/path/to/error_log_file"

		访问日志：
			CustomLog /PATH/TO/CUSTEOM_LOG_FILE LOGFORMAT, 例如：
			CustomLog logs/access_log combined

			LogFormat 

	11、设定默认字符集
		AddDefaultCharset UTF-8

	12、路径别名
		DocumentRoot "/web/htdocs"
		http://www.test.com/images/logo.gif  ==> /web/htdocs/images/logo.gif

			/www/static/
				/www/static/logo.gif

		Alias

	13、脚本路径别名：
		CGI：协议
		ScriptAlias /PATH/ /PATH/TO/SOMFEDIR/

CGI测试脚本
#!/bin/bash
#
cat << EOF
Content-Type: text/html

<pre>

The hostname is: `/bin/hostname`.

The time is: `date`.

</pre>

EOF
# end of cgi script file

14、基于用户访问控制

DocumentRoot "/var/www/html"

<Directory "/PATH/TO/DocumentRoot_SUBDIR">
	Options None
	AllowOverride AuthConfig
	AuthName "Realm"
	AuthType Basic
	AuthUserFile /path/to/passwords
	Require jerry tom
</Directory>

(1) 建立用户帐号文件
htpasswd -c -m /path/to/password_file USERNAME

(2) 一个配置示例

<Directory "/website/htdocs/downloads">
    Options Indexes
    AllowOverride AuthConfig
    AuthName "Only for employees."
    AuthType Basic
    AuthUserFile /etc/httpd/conf/.htpass
    Require valid-user
</Directory>

(3)组
组文件：
组名：用户 用户2 用户3
AuthGroupFile 
Require GRP_NAME

15、虚拟主机

虚拟主机类型：
	基于端口的虚拟主机：
	基于IP的虚拟主机：
	基于主机名的虚拟主机：

	www.a.com 172.16.100.1
	www.b.org 172.16.100.1

	request报文
		Host: 

虚拟主机和主服务器不能同时使用：关闭主服务器，注释主服务器的DocumentRoot即可；

每个虚拟主机的定义：
<VirtualHost IP:PORT>
	ServerName 
	DocumentRoot ""
</VirutalHost>

(1) 基于端口的虚拟主机
172.16.100.1:80 , /web/host1/
172.16.100.1:8080, /web/host2/

(2)基于IP的虚拟主机
172.16.100.1:80 , /web/host1/
172.16.100.2:80, /web/host2/

(3)基于主机名的虚拟主机
httpd-2.2: NameVirtualHost 

172.16.100.1:80 , /web/host1/, www.a.com
172.16.100.1:80 , /web/host2/, www.b.org

虚拟主机单独配置：
	CustomLog 
	ErrorLog
	<Directory "">
	</Directory>
	ScriptAlias /cgi-bin/
	Alias 

16、https: SSL/TLS会话的建立仅能基于IP地址进行
	443/tcp:

	SSLv2, SSLv3
	TLSv1

	libssl, httpd, https(mod_ssl)

	前提：给httpd服务提供私钥文件和证书文件

	1、生成私钥
	2、生成证书申请

	自建CA


测试命令：
#openssl s_client -connect www.test.com:443 -CAfile /etc/pki/CA/cacert.pem

www.test.com

URL rewrite


17、httpd status
LoadModule status_module modules/mod_status.so
ExtendedStatus On

<Location /status>
    SetHandler server-status
    AuthName "Status"
    AuthType Basic
    AuthUserFile /etc/httpd/conf/.statuspass
    Require valid-user
</Location>


练习：
1、支持ssl
2、基于/status提供server-status
3、对于/status的访问提供帐号和密码；


18、curl命令

curl是基于URL语法在命令行方式下工作的文件传输工具，它支持FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE及LDAP等协议。curl支持HTTPS认证，并且支持HTTP的POST、PUT等方法， FTP上传， kerberos认证，HTTP上传，代理服务器， cookies， 用户名/密码认证， 下载文件断点续传，上载文件断点续传,，http代理服务器管道（ proxy tunneling）， 甚至它还支持IPv6， socks5代理服务器,，通过http代理服务器上传文件到FTP服务器等等，功能十分强大。

curl的常用选项：

    -A/--user-agent <string> 设置用户代理发送给服务器
    -basic 使用HTTP基本验证
    --tcp-nodelay 使用TCP_NODELAY选项
    -e/--referer <URL> 来源网址
    --cacert <file> CA证书 (SSL)
    --compressed 要求返回是压缩的形势
    -H/--header <line>自定义头信息传递给服务器
    -I/--head 只显示响应报文首部信息
    --limit-rate <rate> 设置传输速度
    -u/--user <user[:password]>设置服务器的用户和密码
    -0/--http1.0 使用HTTP 1.0


19、使用mod_deflate模块压缩页面优化传输速度

# mod_deflate configuration
<IfModule mod_deflate.c>
 
	# Restrict compression to these MIME types
	AddOutputFilterByType DEFLATE text/plain
	AddOutputFilterByType DEFLATE text/html
	AddOutputFilterByType DEFLATE application/xhtml+xml
	AddOutputFilterByType DEFLATE text/xml
	AddOutputFilterByType DEFLATE application/xml
	AddOutputFilterByType DEFLATE application/x-javascript
	AddOutputFilterByType DEFLATE text/javascript
	AddOutputFilterByType DEFLATE text/css
 
	# Level of compression (Highest 9 - Lowest 1)
	DeflateCompressionLevel 9
	 
	# Netscape 4.x has some problems.
	BrowserMatch ^Mozilla/4 gzip-only-text/html
	 
	# Netscape 4.06-4.08 have some more problems
	BrowserMatch ^Mozilla/4\.0[678] no-gzip
	 
	# MSIE masquerades as Netscape, but it is fine
	BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html
	 
	<IfModule mod_headers.c>
		# Make sure proxies don't deliver the wrong content
		Header append Vary User-Agent env=!dont-vary
	</IfModule>
 
</IfModule>


回顾知识：
	304:
	301：
	302

	<method> <request-URL> <version>

	<version> <status> <reason-phrase>

	POST, TRACE, GET, HEAD

	Options 
		Indexes: 
		FollowSymLinks

	<Directory "/var/www/html">
		Options Indexes FollowSymLinks

	<Directory "/var/www/html/downloads">
		Options -FollowSymLinks

	<VirtualHost IP:PORT>
		ServerName
		DocumentRoot
	</VirtualHost>

	http://www.test.com/downloads/
		Alias ALIAS FS_PATH




20、编译安装httpd-2.4.4

依赖于更高版本的apr和apr-util，因此需要事先安装此两个包。此外，httpd还依赖于pcre的开发功能，因此，要事先安装pcre-devel包。

# yum -y install pcre-devle

(1) 编译安装apr

# tar xf apr-1.4.6.tar.bz2
# cd apr-1.4.6
# ./configure --prefix=/usr/local/apr
# make && make install

(2) 编译安装apr-util

# tar xf apr-util-1.5.2.tar.bz2
# cd apr-util-1.5.2
# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
# make && make install

(3) 编译安装httpd

# tar xf httpd-2.4.4.tar.bz2
# cd httpd-2.4.4
# ./configure --prefix=/usr/local/apache --sysconfdir=/etc/httpd24 --enable-so --enable-ssl --enable-cgi --enable-rewrite --with-zlib --with-pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --enable-modules=most --enable-mpms-shared=all --with-mpm=event
# make && make install




httpd 2.4新特性：
1、MPM可于运行时装载；
	--enable-mpms-shared=all --with-mpm=event
2、Event MPM
3、异步读写
4、在每模块及每目录上指定日志级别；
5、每请求配置；<If>, <ElseIf>, <Else>；
6、增强的表达式分析器；
7、毫秒级的KeepAlive Timeout；
8、基于域名的虚拟主机不再需要NameVirtualHost指令；
9、降低了内存占用；
10、支持在配置文件中使用自定义变量；

--enable-modules=most
新增加的模块：
mod_proxy_fcgi
mod_proxy_scgi
mod_proxy_express
mod_remoteip
mod_session
mod_ratelimit
mod_request
等等；


对于基于IP的访问控制
Order allow,deny
allow from all

2.4中不再支持此方法

2.4 使用Require user
Require user USERNAME
Require group GRPNAME


Require ip IPADDR
Require not ip IPADDR
	IP
	NETWORK/NETMASK
	NETWORK/LENGTH
	NET
	
	172.16.0.0/255.255.0.0 = 172.16.0.0/16 = 172.16
	
Require host HOSTNAME
Require not host HOSTNAME
	HOSTNAME
	DOMAIN
	
	www.test.com
	.test.com
	
	允许所有主机访问：
	Require all granted
	
	拒绝所有主机访问：
	Require all deny


练习：
建立httpd服务器(基于编译的方式进行)，要求：
	1)提供两个基于名称的虚拟主机:
		(a)www1.test.com，页面文件目录为/web/vhosts/www1；错误日志为/var/log/httpd/www1.err，访问日志为/var/log/httpd/www1.access；
		(b)www2.test.com，页面文件目录为/web/vhosts/www2；错误日志为/var/log/httpd/www2.err，访问日志为/var/log/httpd/www2.access；
		(c)为两个虚拟主机建立各自的主页文件index.html，内容分别为其对应的主机名；
		(d)通过www1.test.com/status输出httpd工作状态相关信息，且只允许提供帐号密码才能访问(status:status)；
	2)www1主机仅允许172.16.0.0/16网络中的客户机访问；www2主机可以被所有主机访问；


为上题中的第2个虚拟主机提供https服务，使得用户可以通过https安全的访问此web站点；
	(1)要求使用证书认证，证书中要求使用的国家(CN)、州(Henan)、城市(Zhengzhou)和组织(MageEdu)；
	(2)设置部门为TECH，主机名为www2.test.com，邮件为admin@test.com；
	(3)此服务禁止来自于192.168.1.0/24网络中的主机访问；



IO模型：

异步IO主要应用于文件IO。在同步在编程里，一般是指只有在某个IO操作执行完后可以执行后面的操作。异步则是将某个操作给系统，主线程继续执行别的操作，而由内核完成操作后去负责通知主线程异步操作已经完成。


同步：指进程发出一个过程(功能、函数)调用后，在没有得到结果之前，该调用将不会返回。

异步：指进程发出一个过程(功能、函数)调用后，调用者不能立刻得到结果，但调用会返回。调用完成后，内核通过状态、通知和回调来通知调用者。

同步IO操作会导致请求进程阻塞，直到I/O操作完成；异步I/O操作不导致请求进程阻塞。

阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入睡眠状态）。函数只有在得到结果之后才会返回。

非阻塞：指在不能立刻得到结果之前，被调用函数不会阻塞当前线程，而会立刻返回。

	I/O多路复用
	事件驱动
		水平触发
		边缘触发




理论知识IO：
	同步，异步
	阻塞，非阻塞

	同步：
	阻塞：
	非阻塞：
	异步：

	I/O复用：select, poll, 复用器
	event-driven: epoll, kqueue
		libevent: 
	AIO: 异步IO
	mmap:　内存映射

	nginx: 

	nginx, httpd: web server
		http, https
			html
	资源：html, .txt, .doc, .css

httpd, nginx
	module
	CGI: 协议
	FastCGI: 协议

动态网站开发语言：
	php
	jsp: tomcat, (ajp, http)
	python: (mod_python, uWSGI)

程序：指令+数据

文本文件：
	数据管理系统
	数据库引擎

	数据模型：
		层次模型
		网状模型
		Codd: 关系模型
			关系：



RDMBS设计范式：

设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。

目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴德斯科范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。

(1) 第一范式（1NF）

所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。

说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。

(2) 第二范式(2NF)

第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。

第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。

(3) 第三范式（3NF）

第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。

关系运算：
	投影：挑列
	选择：挑行

操作：CRUD
	Create
	Read
	Update
	Delete

SQL: Structure Query Laguage



数据库管理系统(DBMS)设计目标：
1、数据的冗余和不一致；
2、数据访问困难；
3、数据孤立；
4、完成整性问题；
5、原子性问题；
6、并发访问问题；
7、安全性问题

DBMS: 

物理层：物理模式
逻辑层：概念模式
视图层：外模式

事务：ACID

CRUD: 

ODBC: Open DataBase Connectivity
JDBC:

MySQL: Oracle
	MariaDB
PostgreSQL

RHEL7, MariaDB, Percona


<?php
statement;
?>


mysql服务器: mysqld
	端口：3306/tcp

	用户：username@host
		默认用户：root, 密码为空

mysql客户端：mysql
	-uUSERNAME
	-hHOST
	-pPASSWORD

客户端命令：不用分号结尾
	USE DB_NAME：设置DB_NAME为默认数据库；
服务器端命令：必须使用分号结尾
	SHOW DATABASES: 显示有权限访问的所有数据库；
	SELECT DATABASE(): 显示默认数据库
	CREATE DATABASE DB_NAME: 创建名为DB_NAME的数据库；
	DROP DATABASE DB_NAME: 删除名为DB_NAME的数据库；

存储引擎：




	
<?php
  $link=mysql_connect(localhost,root,'');
  if ($link)
        echo "Sueccess...";
  else
        echo "Failure...";
?>


Linux+httpd+php+mysql
LAMP:
	wordpress
	discuz
	phpwind
	phpbb
	drupal
	joomla


phpMyAdmin: 基于web管理mysql


mysql: 表，CRUD；
mysql安装配置、用户帐创建、删除等；
php原理、编译安装
LAMP
xcache
memcached


ssl, 编译安装, cgi, fastcig, module
httpd, (mod_php, cgi, fastcgi)

程序语言：
	编译型：C, C++, JAVA, C# (编译器)
	解释型：shell, perl, python, ruby, php (解释器)

	php, jsp, asp.net, python, ruby on rails

	python: 
	ruby:

	php: --> hiphop
	jsp: --> Servlet --> bytecode 


程序：指令+数据

/etc/passwd:
	/bin/bash

认证，授权, 审计

	nginx: 

	MySQL: 
		线程池：

	 [prefork]

	 存储引擎:
	 	ACID: 一致性, 持久性, 原子性, 隔离性
	 	事务：transaction

	 	锁：并发访问

	 	随机访问：
	 	随机I/O --> 顺序I/O

	RDMBS: SQL
		select salary from tb1;


shell: bash, csh, tcsh, zsh

SQL: ANSI
	sql-86,
	, sql-89, sql92 sql99, sql03


MySQL: SQL
SQL Server: T-SQL
Oracle: PL/SQL

	: 触发器、存储过程、存储函数、游标

表
视图
索引
用户
事件调度器

安装：
	OS Vendor: (CentOS) mysql, mysql-server, mysql-devel
	MySQL:
		源码编译
		通用二进制格式程序包
		rpm包

		RHEL
		Oracle Enterprise Linux 
		CentOS

MySQL的配置文件：my.cnf，集中式多段配置文件
	MySQL服务器程序：mysqld
	     客户端程序：mysql, mysqldump, mysqladmin

[mysqld]
datadir = 

[mysql]

[client]



datadir: /var/lib/mysql/
datadir: /usr/local/mysql/data/

/mydata/data/

lv: 


mysqld: mysql, mysql


mysql> show [global|session] variables;
	显示服务器参数变量
		有些变量的值可以修改，能够改变mysql的工作特性
			有些可以动态调整，即刻生效；
			另外一些只能修改配置文件后，重启生效；
mysql> show [global|session] status; 
	显示服务器状态变量
		记录了当前包括过去的时间内mysql的运行统计数据



MySQL用户名：USERNAME@HOST
	mysql库的user表中：
		user, password, host

mysql客户端执行命令：
	客户端命令：不需语句结束符
		mysql> help
	服务器端命令：特指SQL语句, 必须有语句结束符，默认为分号; 
		mysql> help COMMAND


用户管理：
	创建用户：CREATE USER username@host [IDENTIFIED BY 'password'];
		用户或主机可以使用通配符：
			%：匹配任意长度的任意字符；
			_: 匹配任意单个字符；

	用户授权：GRANT ALL PRIVILEGES ON dbname.tablename TO username@host [IDENTIFIED BY 'password'];

修改用户密码：
	1、mysql> SET PASSWORD FOR username@host=PASSWORD('password');
	2、# mysqladmin -uusername password 'password' -p

删除用户：DROP USER username@host;

GRANT ALL ON *.* TO 'root'@'172.16.%.%' IDENTIFIED BY 'mypass';


mysql> 
	quit, \q
	delimiter, \d
	go, \g
	use, \u
	ego, \G
	system, \!
	status, \s

mysql：执行方式有两种
	交互式方式：
		-h, --host=
		-u, --user=
		-p, --password=
		-D db_name, --database=
		-e 'SQL_Statement;'

	批处理模式：
		使用sql脚本；
			mysql OPTIONS < script.sql
			mysql> source /path/to/script.sql

mysqld, mysql: /etc/my.cnf
	/etc/my.cnf, /etc/mysql/my.cnf, $MYSQL_BASE/my.cnf, ~/.my.cnf


RDBMS: 
	表
	视图
	索引
	用户
	约束
	事务
	存储过程
	存储函数
	触发器
	事件调度器

cell

abc, Abc

数据类型，字符集

上：01001100 0111010
上：10001001 0000111

ASCII: 128, 0-127

GB2312, GB18030, GBK, UTF, Unicode

上，下

排序规则


显示所支持的所有字符集：
mysql> SHOW CHARACTER SET;

显示所有字符集的排序规则：
mysql> SHOW COLLATION;

表：--> 数据库
row, 
field, column

字段属性：字段名(不区分大小写), 数据类型, 修饰符, 约束

Name,   id,  Age,  Class
jerry   1          二班
tom     2          二班
blair   3          二班

Name,   id,  Age,  ClassID
jerry   1          2
tom     2          2
blair   3          2
Ou Yangfeng 4   70  4

ClassID Class
1
2       二班
3





关系型数据库：
	Constraint: 
		主键：primary key
			不能为空，惟一；
		惟一键：uniq key
			可以为空，惟一；
		外键：foreign key
			引用性约束
		检查性约束：
			0<age<150

数据类型：
	字符型:
		CHAR(n)
		VARCHAR(n)
		BINARY(n)
		VARBINARY(n)

		TEXT
		BLOB

		修饰符：NOT NULL, DEFAULT ''
	数值型:
		精确数值型:
			整型:
				TINYINT: 1byte, -128, 127    0,255
				SMALLINIT: 2bytes, -32768, 32767   0,65535
				MEDIUMINT: 3bytes, 0,2^24
				INT: 4bytes, 0,2^32
				BIGINT: 8bytes, 0,2^64

				DECIMAL: 

				修饰符：NOT NULL, DEFAULT '', UNSIGNED, AUTO_INCREMENT
		近似数值型:
			浮点型:
				FLOAT
				DOUBLE
				REAL
				修饰符：NOT NULL, DEFAULT ''
	日期时间型：
		DATE
		TIME
		DATETIME
		YEAR(2), YEAR(4)
		TIMESTAMP
		修饰符：NOT NULL, DEFAULT ''
	布尔型
	内置类型：
		ENUM, SET
		修饰符：NOT NULL, DEFAULT ''

		Mon, Tue, Wed,

		mmm


作业：
前提：通过DNS为www.test.com设定两个A记录，分别指定两台web服务器，实现并思考：
1、部署一台主机通过MySQL提供数据服务；两台服务器提供httpd+php(假设为ServA和ServB)，且安装phpwind论坛；但要求，通过两台服务器访问的站点同相同的；
思考并验正：(1)一个用户通过ServA上的论坛发贴后，其它用户或同一用户通过另外一台web服务器ServB是否能访问到相同的内容？
	        (2)一个用户通过ServA上的论坛发贴并上传附件后，其它用户或同一用户通过另外一台web服务器ServB是否能访问到相同的内容？
			(3)如有问题，利用已经学过的知识，如何解决现有问题？
2、如果要求为http服务提供https协议的支持，两台服务器使用同一个数字证书还是不同的证书？实现并验正。

提示：前端服务器可以使用rpm程序包部署，后端服务器MySQL要使用通用二进制格式程序包。

创建表：
	CREATE TABLE tb_name (col1 defination, col2 defination, ..., key defination);

删除表：
	DROP TABLE tb_name;


Name,   id,  Age,  Class
jerry   1          二班
tom     2          二班
blair   3          二班

CREATE TABLE students (Name CHAR(30) NOT NULL, id TINYINT UNSIGNED, Age TINYINT UNSIGNED, Class VARCHAR(20) NOT NULL, PRIMARY KEY(Name))


CRUD: 

SQL语句：
	DDL: Data Defination Language
		CREATE, DROP, ALTER
	DML: Data Manapulation Language
		INSERT, DELETE, UPDATE
	SELECT
	DCL: Data Control Language
		GRANT, REVOKE


INSERT INTO 

SELECT 字段 FROM 表 WHERE ; 
字段：
	col1, col2
	*
	col1 AS NEWNAME, col2,

	比较运算：>, <, >=, <=, =, !=
	NULL: IS NULL, IS NOT NULL
	LIKE :
		%: 任意长度的任意字符
		_：任意单个字符
	IN （LIST）
	RLIKE: 正则表达式书写模式

UPDATE 表名 SET 字段名=值 WHERE;

DELETE FROM 表名 WHERE ; 












MySQL基础操作练习(所属的库叫做testdb)：

新建如下表（包括结构和内容）：

ID    Name          Age     Gender     Course
1     Ling Huchong   24      Male       Hamogong
2     Huang Rong    19      Female     Chilian Shenzhang
3     Lu Wushaung   18      Female     Jiuyang Shenggong
4     Zhu Ziliu     52      Male       Pixie Jianfa
5     Chen Jialuo   22      Male       Xianglong Shiba Zhang

CREATE TABLE tb1 (ID TINYINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT, Name CHAR(30) NOT NULL UNIQUE KEY, Age TINYINT UNSIGNED, Gender CHAR(1) DEFAULT 'M', Course VARCHAR(50) NOT NULL);


	
2、完成如下操作
	(1)找出性别为女性的所有人；
	(2)找出年龄大于20的所有人；
	(3)修改Zhu Ziliu的Course为Kuihua Baodian; 
	(4)删除年龄小于等于19岁的所有人；
	(5)创建此表及所属的库；	
	(6)授权给testuser对testdb库有所有访问权限；

mysql> SELECT name FROM students WHERE Gender='Female';
mysql> SELECT name FROM students WHERE Age>20;
mysql> UPDATE students SET Course='Kuihua Baodian' WHERE name='Zhu Ziliu';
mysql> DELETE FROM students WHERE Age<=19;
mysql> GRANT ALL ON testdb.* TO 'testuser'@'%';

事务的四个特性：ACID，原子性、一致性、隔离性、持久性

数据库对象：库、表、视图、索引、事务、用户、存储过程、存储函数、触发器、游标、事件调度器

DDL: CREATE, DROP, ALTER
DML: INSERT, DELETE, SELECT, UPDATE
DCL: GRANT, REVOKE

mysql, mysql-server


httpd+php:
	module
	CGI
	FastCGI

httpd-2.2
httpd-2.4



一致性hash算法：算法思想
	Consistent hashing

-->解释器-->opcode(字节码)-->

PHP is Hypertext Preprocessor




关于PHP

一、PHP简介
	
PHP是通用服务器端脚本编程语言，其主要用于web开发以实现动态web页面，它也是最早实现将脚本嵌入HTML源码文档中的服务器端脚本语言之一。同时，php还提供了一个命令行接口，因此，其也可以在大多数系统上作为一个独立的shell来使用。

Rasmus Lerdorf于1994年开始开发PHP，它是初是一组被Rasmus Lerdorf称作“Personal Home Page Tool” 的Perl脚本， 这些脚本可以用于显示作者的简历并记录用户对其网站的访问。后来，Rasmus Lerdorf使用C语言将这些Perl脚本重写为CGI程序，还为其增加了运行Web forms的能力以及与数据库交互的特性，并将其重命名为“Personal Home Page/Forms Interpreter”或“PHP/FI”。此时，PHP/FI已经可以用于开发简单的动态web程序了，这即是PHP 1.0。1995年6月，Rasmus Lerdorf把它的PHP发布于comp.infosystems.www.authoring.cgi Usenet讨论组，从此PHP开始走进人们的视野。1997年，其2.0版本发布。

1997年，两名以色列程序员Zeev Suraski和Andi Gutmans重写的PHP的分析器(parser)成为PHP发展到3.0的基础，而且从此将PHP重命名为PHP: Hypertext Preprocessor。此后，这两名程序员开始重写整个PHP核心，并于1999年发布了Zend Engine 1.0，这也意味着PHP 4.0的诞生。2004年7月，Zend Engine 2.0发布，由此也将PHP带入了PHP5时代。PHP5包含了许多重要的新特性，如增强的面向对象编程的支持、支持PDO(PHP Data Objects)扩展机制以及一系列对PHP性能的改进。

二、PHP Zend Engine

Zend Engine是开源的、PHP脚本语言的解释器，它最早是由以色列理工学院(Technion)的学生Andi Gutmans和Zeev Suraski所开发，Zend也正是此二人名字的合称。后来两人联合创立了Zend Technologies公司。

Zend Engine 1.0于1999年随PHP 4发布，由C语言开发且经过高度优化，并能够做为PHP的后端模块使用。Zend Engine为PHP提供了内存和资源管理的功能以及其它的一些标准服务，其高性能、可靠性和可扩展性在促进PHP成为一种流行的语言方面发挥了重要作用。

Zend Engine的出现将PHP代码的处理过程分成了两个阶段：首先是分析PHP代码并将其转换为称作Zend opcode的二进制格式(类似Java的字节码)，并将其存储于内存中；第二阶段是使用Zend Engine去执行这些转换后的Opcode。

三、PHP的Opcode

Opcode是一种PHP脚本编译后的中间语言，就像Java的ByteCode,或者.NET的MSL。PHP执行PHP脚本代码一般会经过如下4个步骤(确切的来说，应该是PHP的语言引擎Zend)：
1、Scanning(Lexing) —— 将PHP代码转换为语言片段(Tokens)
2、Parsing —— 将Tokens转换成简单而有意义的表达式
3、Compilation —— 将表达式编译成Opocdes
4、Execution —— 顺次执行Opcodes，每次一条，从而实现PHP脚本的功能

四、php的加速器

基于PHP的特殊扩展机制如opcode缓存扩展也可以将opcode缓存于php的共享内存中，从而可以让同一段代码的后续重复执行时跳过编译阶段以提高性能。由此也可以看出，这些加速器并非真正提高了opcode的运行速度，而仅是通过分析opcode后并将它们重新排列以达到快速执行的目的。

常见的php加速器有：

1、APC (Alternative PHP Cache)
遵循PHP License的开源框架，PHP opcode缓存加速器，目前的版本不适用于PHP 5.4。项目地址，http://pecl.php.net/package/APC。

2、eAccelerator
源于Turck MMCache，早期的版本包含了一个PHP encoder和PHP loader，目前encoder已经不在支持。项目地址， http://eaccelerator.net/。

3、XCache
快速而且稳定的PHP opcode缓存，经过严格测试且被大量用于生产环境。项目地址，http://xcache.lighttpd.net/

4、Zend Optimizer和Zend Guard Loader
Zend Optimizer并非一个opcode加速器，它是由Zend Technologies为PHP5.2及以前的版本提供的一个免费、闭源的PHP扩展，其能够运行由Zend Guard生成的加密的PHP代码或模糊代码。 而Zend Guard Loader则是专为PHP5.3提供的类似于Zend Optimizer功能的扩展。项目地址，http://www.zend.com/en/products/guard/runtime-decoders

5、NuSphere PhpExpress
NuSphere的一款开源PHP加速器，它支持装载通过NuSphere PHP Encoder编码的PHP程序文件，并能够实现对常规PHP文件的执行加速。项目地址，http://www.nusphere.com/products/phpexpress.htm

五、PHP源码目录结构

PHP的源码在结构上非常清晰。其代码根目录中主要包含了一些说明文件以及设计方案，并提供了如下子目录：

1、build —— 顾名思义，这里主要放置一些跟源码编译相关的文件，比如开始构建之前的buildconf脚本及一些检查环境的脚本等。
2、ext —— 官方的扩展目录，包括了绝大多数PHP的函数的定义和实现，如array系列，pdo系列，spl系列等函数的实现。 个人开发的扩展在测试时也可以放到这个目录，以方便测试等。
3、main —— 这里存放的就是PHP最为核心的文件了，是实现PHP的基础设施，这里和Zend引擎不一样，Zend引擎主要实现语言最核心的语言运行环境。
4、Zend —— Zend引擎的实现目录，比如脚本的词法语法解析，opcode的执行以及扩展机制的实现等等。
5、pear —— PHP 扩展与应用仓库，包含PEAR的核心文件。
6、sapi —— 包含了各种服务器抽象层的代码，例如apache的mod_php，cgi，fastcgi以及fpm等等接口。
7、TSRM —— PHP的线程安全是构建在TSRM库之上的，PHP实现中常见的*G宏通常是对TSRM的封装，TSRM(Thread Safe Resource Manager)线程安全资源管理器。
8、tests —— PHP的测试脚本集合，包含PHP各项功能的测试文件。
9、win32 —— 这个目录主要包括Windows平台相关的一些实现，比如sokcet的实现在Windows下和*Nix平台就不太一样，同时也包括了Windows下编译PHP相关的脚本。




php.ini官方文档: 
	配置参数：http://www.php.net/manual/zh/ini.list.php
	核心配置参数详解：http://www.php.net/manual/zh/ini.core.php

<html>
	<title></title>	
	<body>
		<h1>This is a test page. </h1>
		<?php phpinfo(); ?>
	</body>
</html>


php-mbstring

multi bytes



0 0 * * * [ $[($(date +%s)/86400)%3] -eq 0 ] && /usr/sbin/ntpdate 172.16.0.1 &> /dev/null

yum -y install libxml2-devel bzip2-devel libmcrypt-devel mhash-devel

# ./configure --prefix=/usr/local/php --with-mysql=/usr/local/mysql --with-openssl --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml  --enable-sockets --with-apxs2=/usr/local/apache/bin/apxs --with-mcrypt  --with-config-file-path=/etc --with-config-file-scan-dir=/etc/php.d --with-bz2  --enable-maintainer-zts


libmcrypt: 
mhash



# ./configure --prefix=/usr/local/apache --sysconfdir=/etc/httpd24 --enable-so --enable-ssl --enable-cgi --enable-rewrite --with-zlib --with-pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --enable-modules=most --enable-mpms-shared=all --with-mpm=event
# make && make install

MPM
	prefork: mod_php
	worker, event: mod_php_zts




ab: 模拟并发n个客户端同时发n请求，总体m个请求

10-->

1000

web: ab, http_load, webbench, seige

网易：tcpcopy


load runner


ulimit: 

ab -c 100 -n 10000 http://pma.test.com/index.php

	-c: 模拟的并发数
	-n: 总的请求数


LAMMP: 系统架构
	memcached: key-value
	xcache: opcode

LAMP: module, FastCGI
	php: appserver, FastCGI服务器
	php-fpm

	httpd 代理模式(proxy, fcgi)--> FastCGI Server(127.0.0.1:9000)


Memcached: 缓存服务器

memcached: 
	11211/udp
	11211/tcp

libevent

安装：
	rpm


hit, miss


php: 
	memcache
	memcached

perl: 
	cache::memcached

C/C++
	libmemcached


httpd-2.4.6
MySQL-5.5.33
php-5.4.19
xcache-3.0.1
libevent-2.0.21
memcached-1.4.15
memcache-2.2.7
libmemcached-1.0.2
memadmin-master


subject verb object


SELinux的相关概念：

1、Objects:
	Directories
	File descriptors
	Files
	Filesystems
	Links
	Processes
	Special files of various types (block device, character device, socket, FIFO, and so on)

2、actions:
	Append
	Create
	Execute
	Get attribute
	I/O control
	Link
	Lock
	Read
	Rename
	Unlink
	Write

3、SELinux associates information called security attributes with subjects and objects and bases its security decisions on the values of these attributes. Three security attributes are used:

	User identity
		The user identity indicates the SELinux user account associated with a subject or object. In the case of a subject, the user identity gives the SELinux user account under which the process is running. In the case of an object, the user identity gives the user account that owns the object.

	Role
		Under SELinux, users are authorized to enter one or more roles, each of which defines a set of permissions a user can be granted. At a given time, a user can reside in only a single role. A user can transition from one authorized role to another by using the special command newrole. This command changes the user's SELinux role similar to the way the Linux su command changes a user's Linux identity. SELinux establishes a special role, sysadm_r, used for administering SELinux facilities.

    Type
		Types, which are also known as domains, divide subjects and objects into related groups. Types are the primary security attribute SELinux uses in making authorization decisions. They establish the sandboxes that constrain processes and prevent privilege escalation. Therefore, you can think of a type as naming a related sandbox.


4、The SELinux security server makes two basic kinds of decisions:

	Access decisions
		Access decisions determine whether a given subject is allowed to perform a given operation on a given object.

	Transition decisions
		Transition decisions, also called labeling decisions, determine the types assigned to newly created objects, particularly processes and files.


5、SELinux Architecture:
	Kernel-level code
	The SELinux shared library
	A security policy
	Tools
	Labeled SELinux filesystems (optional)

6、SELinux commands
	chcon
	getenforce
	setenforce
	getsepool
	setsepool
	restorecon
	fixfiles

/fi
SELinux的启用方式：
	1、Disable，禁用
	2、Permissive, 不真正实施SELinux功能，仅将违反策略的行为记录进audit.log；
	3、enforcing, 强制实施SELinux；

Disabled切换为启用:
打标：为每一个文件赋予安全属性；
1、/etc/selinux/config --> /etc/syslconfig/selinux
2、内核：selinux=1， enforcing=1

Permissive --> Enforcing
Setenforce {0|1}

ls -Z
ps -Z

sebool: selinux bool

getsebool
setsebool

打标命令：
	chcon：修改安全属性
		-t 
		-R 
		--reference
	restorecon: 恢复默认安全属性


打标：
	chcon
	restorecon
sebool: 

semanage


selinux: 安全属性，policy, rule

练习：要求selinux为Enforcing状态；
1、把httpd的DocumentRoot改为/web/htdocs；
2、允许vsftpd的匿名用户上传；




log:
	facility: 设施
		auth
		authpriv
		cron
		daemon
		kern
		lpr
		mail
		mark
		news
		security (same as auth)
		syslog
		user
		uucp
		local0 through local7： 8 customed facility

		通配机制：
			*：所有
			,: 列表
			!

	priority: 级别
		debug
		info
		notice
		warning, warn (same as warning)
		err, error (same as err)
		crit
		alert
		emerg, panic (same as emerg)

	Target:
		文件,如/var/log/messages
		用户，*
		日志服务器，@172.16.100.1
		管道        | COMMAND

	facitlity.priority			Target
	mail.info 					/var/log/maillog
	mail.=info
	mail.!info
	*.info
	mail,news.info
	
日志信息格式：
	时间   主机   进程（PID)：事件

syslog: syslogd -r
rsyslog
syslog-ng


rsyslog: 
	Why rsyslog?
		Multi-threading
		TCP, SSL, TLS, RELP
		MySQL, PostgreSQL, Oracle and more
		Filter any part of syslog message
		Fully configurable output format
		Suitable for enterprise-class relay chains

/etc/rsyslog.conf
	rsyslogd
	rklogd




日志放入MySQL数据库中：
	/usr/share/doc/rsyslog*/

/etc/rsyslog.conf配置：
$ModLoad ommysql 

*.info :ommysql:127.0.0.1,Syslog,root,mypass
*.* :ommysql:172.16.100.1,Syslog,rsysloguser,rsyslogp@ss


$ModLoad imudp.so   # provides UDP syslog reception 
$UDPServerRun 514   # start a UDP syslog server at standard port 514 

以下操作，注意运行httpd的用户：
tar xvzf loganalyzer-3.6.4.tar.gz 
cd loganalyzer-3.6.4 
mv src/* /usr/local/apache/htdocs/syslog/ 
mv contrib/* /usr/local/apache/htdocs/syslog/ 
chmod u+x /usr/local/apache/htdocs/syslog/*.sh 
./configure.sh 
./secure.sh 
chmod 666 config.php 
chown -R daemon.daemon * 

登录web安装。 
http://ip地址/syslog 



rsyslog: facility.priority
	日志记录：ommysql
	日志服务器: imudp, imtcp
	514

	:ommysql:SERVER_IP,DATABASE,user,password

	loganalyzer

	webanalyzer



/etc/selinux/config, /etc/sysconfig/selinux

Disabled, Permissive, (/var/log/audit/audit.log), Enforcing

chcon -t

安全属性：

rsyslog, syslog(syslogd, klogd)


firewall: 
1、工作于网络或主机边缘，对进出本网络或本主机的网络报文按照事先设定好的匹配规则进行检查，对能够被规则所匹配的报文按照规则定义的处理机制进行处理的组件。

TCP/IP报文属性：
	源IP，目标IP, 源端口, 目标端口, 
	TCP标志位：SYN, ACK, FIN, URG, PSH, RST



入侵检测系统(IDS)：NIDS, HIDS
入侵防御系统(IPS): 蜜罐(honeypot) 



NIDS: snort
HIDS: OSSEC
FileSystem: tripwire






iptables/netfilter

Framework:
	hook function


规则的功能：四个表
	filter:
	nat: 
		SNAT:
		DNAT
		PAT:
	mangle
	raw

五个内置链：
	PREROUTING
	INPUT
	FORWARD
	OUTPUT
	POSTROUTING

规则的属性：
	1、网络层协议属性：
		ip

	2、传输层协议属性：
		tcp
		udp
		icmp

filter: 报文过滤
nat
mangle


iptables 
	大写字母选项：子命令
	小写字母选项：用来匹配标准及其它；
	-t {filter|nat|mangle|raw}
	-L: list
		-n: 数字格式显示IP和PORT; 
		-v: 详细信息, -vv, -vvv
		--line-numbers: 显示链中规则的行号；
		-x: 显示精确值，不要做单位换算；

	规则和默认策略都有两个计数器：
		packets: 
		bytes: 


表和链的对应关系：
	filter: INPUT, FORWARD, OUTPUT
	nat: PREROUTING, POSTROUTING, OUTPUT
	mangle:  PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING
	raw: PREROUTING, OUTPUT

每个链都有其默认策略：policy ACCEPT
	通常只需要修改filter表的默认策略


其它子命令：
	管理链: 
		-F: 清空链
			iptables -F
		-P: 设定默认策略
			iptables -t filter -P INPUT {DROP|ACCEPT}
		-N: 新建一条自定义链；
			iptables -N FILTER_WEB 
		-X: 删除自定义的空链；
		-Z: 计算器清零；
			iptables -Z 
		-E: 重命名自定义链
	管理规则:
		-A: append
		-I [n]: 插入为第n条规则
		-D [n]: 删除第n条规则
		-R [n]: 替换第n条规则

编写规则语法：
	iptables [-t 表] 大写选项子命令 [规则号] 链名 匹配标准 -j 目标

	目标：
		DROP: 丢弃
		REJECT：
		ACCEPT
		RETURN
		REDIRECT: 端口重定向
		DNAT
		SNAT
		MASQUERADE
		LOG
			--log-prefix "STRING:"
		MARK
		自定义链

	匹配标准：
		通用匹配
			-s|--src|--source [!] IP/NETWORK
			-d|--dst|--destination [!] IP/NETWORK
				iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.100.1 -j ACCEPT
			-i incoming_interface: 指定数据报文流入接口; INPUT, PREROUTING, FORWARD
			-o outing_interface: 指定数据报文流出接口；OUTPUT, POSTROUTING, FORWARD
			-p {tcp|udp|icmp}

		扩展匹配: 要使用“-m 扩展名称”来引用，而每个扩展模块一般都会有自己特有的专用选项; 这些选项中，有些是必备的；  
			隐含扩展 
				-p tcp
					--sport 
					--dport 
					--tcp-flags 要检查的标志 必须为1标记
						--tcp-flags SYN,ACK,RST,FIN SYN
							ALL
							NONE
						--tcp-flags ALL SYN,FIN
						--syn

						练习：放行对web服务的访问：
							iptables -A INPUT -d 172.16.100.1 -p tcp --dport 80 -j ACCEPT
							iptables -A OUTPUT -s 172.16.100.1 -p tcp --sport 80 -j ACCEPT
				-p udp
					--sport
					--dport
						例如：本机DNS服务器，要为本地客户端做递归查询；iptables的INPUT, OUTPUT默认为DROP；本机地址：172.16.100.1
							# iptables -A INPUT -d 172.16.100.1 -p udp --dport 53 -j ACCEPT
							# iptables -A OUTPUT -s 172.16.100.1 -p udp --sport 53 -j ACCEPT
							# iptables -A OUTPUT -s 172.16.100.1 -p udp --dport 53 -j ACCEPT
							# iptables -A INPUT -d 172.16.100.1 -p udp --sport 53 -j ACCEPT	

				-p icmp
					--icmp-type 
						请求：8
						响应：0

						例子：本机172.16.100.1，能ping 172.16.0.0/16中的所有主机；

			显式扩展:
				-m state --state
					NEW, ESTABLISHED, RELATED, INVALID

					ftp服务需要装载：nf_conntrack_ftp模块, 可以使用modprobe命令，也可编辑/etc/sysconfig/iptables-config文件实现。

				-m mulitport: 可以指定15个以内的离散端口；比如，21-23,80
					--source-ports
					--destination-ports
					--ports

				-m iprange: 指定匹配的IP地址范围，如172.16.100.1-172.16.109.254
					-m iprange 
					    --src-range	
					    --dst-range

				-m limit 
					--limit 20/min
					--limit-burst 2 

				-m string
					--string ""
					--algo {bm|kmp}

				-m time
					--datestart
					--datestop

					--timestart
					--timestop

					--weekdays
					--monthdays


	保存规则：
		service iptables save
			保存至/etc/sysconfig/iptables
		iptables-save > /path/to/iptables.rules
	生效规则文件中的规则：
		iptables-restore < /path/to/ipables.rules




练习：INPUT和OUTPUT默认策略为DROP；
1、限制本地主机的web服务器在周一不允许访问；新请求的速率不能超过100个每秒；web服务器包含了admin字符串的页面不允许访问；web服务器仅允许响应报文离开本机；
# iptables -I INPUT 1 -m state --state ESTABLISHED -j ACCEPT
# iptables -A INPUT -d 172.16.100.1 -p tcp --dport 80 -m time --weekdays Tue,Wed,Thu,Fri,Sat,Sun -m limit --limit 100/sec -m string --algo kmp ! --string "admim" -m state --state NEW -j ACCEPT 
# iptables -I OUTPUT 1 -m state --state ESTABLISHED -j ACCEPT

2、在工作时间，即周一到周五的8:30-18:00，开放本机的ftp服务给172.16.0.0网络中的主机访问；数据下载请求的次数每分钟不得超过5个；
# iptables -A INPUT -s 172.16.0.0/16 -d 172.16.100.1 -p tcp --dport 21 -m time --weekdays Mon,Tue,Wed,Thu,Fri --timestart 08:30:00 --timestop 18:00:00 -j ACCEPT
# iptables -A INPUT -s 172.16.0.0/16 -d 172.16.100.1 -p tcp -m state --state RELATED -m limit --limit 5/min -j ACCEPT

3、开放本机的ssh服务给172.16.x.1-172.16.x.100中的主机，x为你的座位号，新请求建立的速率一分钟不得超过2个；仅允许响应报文通过其服务端口离开本机；
# iptables -A INPUT -m iprange --src-range 172.16.100.1-172.16.100.100 -m limit --limit 2/min -p tcp --dport 22 -d 172.16.100.1 -i eth0 -m state --state NEW -j ACCEPT

4、拒绝TCP标志位全部为1及全部为0的报文访问本机；
# iptables -N clean_in
# iptables -A clean_in -p tcp --tcp-flags ALL ALL -j DROP
# iptables -A clean_in -p tcp --tcp-flags ALL NONE -j DROP
# iptables -A clean_in -d 172.16.100.1 -j RETURN

# iptables -I INPUT 1 -d 172.16.100.1 -j clean_in

5、允许本机ping别的主机；但不开放别的主机ping本机；
# iptables -A OUTPUT -s 172.16.100.1 -p icmp --icmp-type 8 -j ACCEPT

# iptables -A INPUT -i lo -j ACCEPT
# iptables -A OUTPUT -o lo -j ACCEPT


扩展匹配
	隐含：
		-p tcp
			--sport
			--dport
			--tcp-flags 
			--syn = --tcp-flags SYN,ACK,RST,FIN SYN
		-p udp
			--sport
			--dport
		-p icmp
			--icmp-type
				8(echo-request), 0(echo-reply)
	显式:
		-m state
			--state
				NEW, ESTABLISHED, RELATED, INVALID

		-m multiport
			--source-ports
			--destination-ports
			--ports

		-m iprange
			--src-range from[-to]
			--dst-range

		-m limit
			--limit-burst NUM
			--limit RATE
				/sec, /min, /hour

		-m string
			--algo {kmp|bm}
			--string "STRING"

		-m time
			--datestart
			--datestop

			--timestart
			--timestop

			--weekdays
			--monthdays

nat: network address translation
	IPv4

	SNAT, DNAT

C类：192.168.0.0/24, 192.168.254.0/24
B类：172.16.0.0/16, 172.31.0.0/16
A类：10.0.0.0/8


SNAT: 代理内部客户端访问外部网络；在iptables的POSTROUTING
	-j SNAT --to-source IP
	-j MASQUERADE
DNAT：将内部服务器发布至外部网络；在iptables的PREROUTING
	不但能转换目标地址，还能映射目标端口
	-j DNAT --to-destination IP:port




/proc/net/nf_conntrack
/proc/sys/net/nf_conntrack_max

cat /proc/slabinfo


nf_conntrack_tcp_timeout_established默认情况下 timeout 是5天（432000秒）
目录：/proc/sys/net/ipv4/netfilter/




练习：判断下述规则的意义：
# iptables -N clean_in
# iptables -A clean_in -d 255.255.255.255 -p icmp -j DROP
# iptables -A clean_in -d 172.16.255.255 -p icmp -j DROP

# iptables -A clean_in -p tcp ! --syn -m state --state NEW -j DROP
# iptables -A clean_in -p tcp --tcp-flags ALL ALL -j DROP
# iptables -A clean_in -p tcp --tcp-flags ALL NONE -j DROP
# iptables -A clean_in -d 172.16.100.7 -j RETURN 


# iptables -A INPUT -d 172.16.100.7 -j clean_in

# iptables -A INPUT  -i lo -j ACCEPT
# iptables -A OUTPUT -o lo -j ACCEPT


# iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 53,113,135,137,139,445 -j DROP
# iptables -A INPUT  -i eth0 -m multiport -p udp --dports 53,113,135,137,139,445 -j DROP
# iptables -A INPUT  -i eth0 -p udp --dport 1026 -j DROP
# iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 1433,4899 -j DROP

# iptables -A INPUT  -p icmp -m limit --limit 10/second -j ACCEPT



connlimit
	--connlimit-above [num]

# iptables -A INPUT -s 172.16.0.0/16 -p tcp --dport 80 -m connlimit ! --connlimit-above 5 -j ACCEPT

hashlimit, limit




利用iptables的recent模块来抵御DOS攻击: 22，建立一个列表，保存有所有访问过指定的服务的客户端IP


ssh: 远程连接，

iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 3 -j DROP


iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH
iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j LOG --log-prefix "SSH Attach: "
iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j DROP

1.利用connlimit模块将单IP的并发设置为3；会误杀使用NAT上网的用户，可以根据实际情况增大该值；

2.利用recent和state模块限制单IP在300s内只能与本机建立2个新连接。被限制五分钟后即可恢复访问。

下面对最后两句做一个说明：

1.第二句是记录访问tcp 22端口的新连接，记录名称为SSH
--set 记录数据包的来源IP，如果IP已经存在将更新已经存在的条目

2.第三句是指SSH记录中的IP，300s内发起超过3次连接则拒绝此IP的连接。
--update 是指每次建立连接都更新列表；
--seconds必须与--rcheck或者--update同时使用
--hitcount必须与--rcheck或者--update同时使用

3.iptables的记录：/proc/net/xt_recent/SSH


也可以使用下面的这句记录日志：
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --name SSH --second 300 --hitcount 3 -j LOG --log-prefix "SSH Attack"




tcp有限状态机：
	listen, syn_sent, syn_recv, established, 
	fin_wait_1, close_wait, fin_wait_2, last_ack
	close

iptables: nf_conntrack
	tcp, udp, icmp

报文过滤：包过滤型防火墙
	-j Target
		DROP, ACCEPT, REJECT, REDIRECT, LOG, SNAT, DNAT, MASQUERADE, 自定义链, RETURN

扩展匹配：
	tcp, udp, icmp
	state, limit, connlimit, string, time, iprange, multiport, recent

netfilter: 第三方扩展模块, layer7

iptables/netfilter:
	iptables: 用户空间工具，规则编写
		/etc/sysconfig/iptables
	netfilter: 内核中某功能框架

1、向内核的netfilter打补丁；
2、向iptables打补丁；



diff: 
patch: 

diff old_file new_file

patch old_file patch_file

old_dir/20
new_dir/20

patch_dir/8

cd old_dir/a
patch < a.patch
	-p3





make menuconfig
make gconfig
make kconfig
make oldconfig
make allyesconfig
make allnoconfig
make randconfig
make config

make

make modules_install
make install

make SUBDIR=arch/

	bzImage： /boot/vmlinuz-VERSION

iptables的安装：
	1、下载iptables源码，打补丁，而后编译; 
	2、下载src.rpm格式包，安装，打补丁，而后重新制作成rpm包；



为内核打补丁并重新编译内核：

# tar xf linux-2.6.32-358.el6.tar.bz2 -C /usr/src/
# tar xf  netfilter-layer7-v2.23.tar.gz  -C  /usr/src
# cd /usr/src
# ln –sv  linux-2.6.32-358.el6  linux
# cd /usr/src/linux/
# patch -p1  <  ../netfilter-layer7-v2.23/kernel-2.6.32-layer7-2.23.patch 

# cp /boot/config-2.6.32-358.el6.x86_64  /usr/src/linux/.config
# make  menuconfig


Networking support → Networking Options →Network packet filtering framework → Core Netfilter Configuration
<M>  “layer7” match support

# make 
# make modules_install
# make install


www.oschina.net
www.wooyun.com
www.freebuf.com



Compiles iptables :

# cp /etc/init.d/iptables ~/iptables
# cp /etc/sysconfig/iptables-config ~/
# rpm  -e  iptables-ipv6  iptables  iptstate  --nodeps
# tar jxvf iptables-1.4.6.tar.bz2 –C  /usr/src
# cd /usr/src/iptables-1.4.6
# cp ../netfilter-layer7-v2.22/iptables-1.4.3forward-for-kernel-2.6.20forward/libxt_layer7.*   ./extensions/


# ./configure  --prefix=/usr  --with-ksource=/usr/src/linux
# make
# make install




# tar zxvf l7-protocols-2009-05-28.tar.gz
# cd l7-protocols-2009-05-28
# make install

# mv ~/iptables  /etc/rc.d/init.d/

# service iptables start


l7-filter uses the standard iptables extension syntax 
# iptables [specify table & chain] -m layer7 --l7proto [protocol name] -j [action] 


# iptables -A FORWARD -i eth1 -m layer7 --l7proto qq -j REJECT




问题总结：
1、由于选择移除了网络中对无线网的支持功能，却没有关闭编译移动网设备的驱动程序，使得编译过程出错；
2、没有装载nf_conntrack模块时，net.netfilter.nf_conntrack_acct内核参数不会出现，因此，将无法配置；
3、刚启动acct功能时，连接追踪可能无法立即生效，需要稍等片刻后layer7的相关功能才会被启用；




diff是Unix系统的一个很重要的工具程序。它用来比较两个文本文件的差异，是代码版本管理的核心工具之一。其用法非常简单：
　　# diff <变动前的文件> <变动后的文件>

由于历史原因，diff有三种格式：
　　* 正常格式（normal diff）
　　* 上下文格式（context diff）
　　* 合并格式（unified diff）

1、正常格式的diff
	例如，对file1（变动前的文件）和file2（变动后的文件）进行比较可使用如下命令：
　　 	# diff file1 file2
	显示结果中，第一行是一个提示，用来说明变动位置。它分成三个部分：前面的数字，表示file1的第n行有变化；中间的"c"表示变动的模式是内容改变（change），其他模式还有"增加"（a，代表addition）和"删除"（d，代表deletion）；后面的"4"，表示变动后变成f2的第4行。

2、上下文格式的diff
	上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff。它的使用方法是加入-c选项（即context）。
　　 	# diff -c f1 f2
	结果分成四个部分。第一部分的两行，显示两个文件的基本情况：文件名和时间信息，"***"表示变动前的文件，"---"表示变动后的文件。第二部分是15个星号，将文件的基本情况与变动内容分割开。第三部分显示变动前的文件，即file1。
	另外，文件内容的每一行最前面，还有一个标记位。如果为空，表示该行无变化；如果是感叹号（!），表示该行有改动；如果是减号（-），表示该行被删除；如果是加号（+），表示该行为新增。
	第四部分显示变动后的文件，即file2。

3、合并格式的diff
	如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了"合并格式"的diff，将f1和f2的上下文合并在一起显示。
	它的使用方法是加入u参数（代表unified）。
　　# diff -u f1 f2
	其结果的第一部分，也是文件的基本信息。"---"表示变动前的文件，"+++"表示变动后的文件。第二部分，变动的位置用两个@作为起首和结束。第三部分是变动的具体内容。
	除了有变动的那些行以外，也是上下文各显示3行。它将两个文件的上下文，合并显示在一起，所以叫做"合并格式"。每一行最前面的标志位，空表示无变动，减号表示第一个文件删除的行，加号表示第二个文件新增的行。

patch
尽管并没有指定patch和diff的关系，但通常patch都使用diff的结果来完成打补丁的工作，这和patch本身支持多种diff输出文件格式有很大关系。patch通过读入patch命令文件（可以从标准输入），对目标文件进行修改。通常先用diff命令比较新老版本，patch命令文件则采用diff的输出文件，从而保持原版本与新版本一致。
patch的标准格式为
patch [options] [originalfile] [patchfile]

如果patchfile为空则从标准输入读取patchfile内容；如果originalfile也为空，则从patchfile（肯定来自标准输入）中读取需要打补丁的文件名。因此，如果需要修改的是目录，一般都必须在patchfile中记录目录下的各个文件名。绝大多数情况下，patch都用以下这种简单的方式使用：
patch -p[num] <patchfile

patch命令可以忽略文件中的冗余信息，从中取出diff的格式以及所需要patch的文件名，文件名按照diff参数中的"源文件"、"目标文件"以及冗余信息中的"Index："行中所指定的文件的顺序来决定。

-p参数决定了是否使用读出的源文件名的前缀目录信息，不提供-p参数，则忽略所有目录信息，-p0（或者-p 0）表示使用全部的路径信息，-p1将忽略第一个"/"以前的目录，依此类推。如/usr/src/linux-2.4.15/Makefile这样的文件名，在提供-p3参数时将使用linux-2.4.15/Makefile作为所要patch的文件。












Rsync:  remote sync

rsync有四种工作模式：
	第一个是shell模式，也称为本地模式；
	第二个是远程shell模式，其利用SSH执行底层连接和传输；
	第三个是列表模式，其工作方式与ls相似，即列出源的内容；-nv
	第四个模式是服务器模式。rsync以守护进程方式运行，接收文件传输请求。在使用时，可以使用rsync命令把文件发送给守护进程，也可以向它请求文件。服务器模式非常适合创建中心备份服务器或项目存储库。

	远程shell模式和服务器模式的差异在于，后者在源和目标名中使用两个冒号 (:)

	rsync -rl /www/htdocs HOST:/www
	rsync -rl /www/htdocs HOST::htdocs

rsync有许多选项。如果担心指定的选项或者源或目标不正确，可以使用-n执行试运行。试运行 会预览对每个文件的操作，但是不会实际复制数据。当确认所有设置是正确的之后，删除-n选项，再次运行命令。

Rsync常用选项：
	-v, --verbose 详细模式输出 
	-q, --quiet 精简输出模式 
	-c, --checksum 打开校验开关，强制对文件传输进行校验 
	-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD 
	-r, --recursive 对子目录以递归模式处理 
	-l, --links 保留符号链结
	-p, --perms 保留文件权限
	-t, --times 保留文件时间戳 
    -g, --group 保留文件属组信息 
	-o, --owner 保留文件属主信息
	-D, --devices 保留设备文件即特殊文件信息

	-e, --rsh=COMMAND 指定替代rsh的shell程序
	-z, --compress 对备份的文件在传输时进行压缩处理

	还可以使用两个选项监视传输的状态：--progress和--stats。
		--progress 显示进度条
		--stats 显示如何执行压缩和传输

注意：rsync命令使用中，如果源参数的末尾有斜杠，就会复制指定目录的内容，而不复制目录本身。目标参数末尾的斜杠没有作用。如下面的命令会把/mydata/data目录中的所有文件复制到/backups目录中。
	# rsync /mydata/data/  /backups/



配置rsync以daemon的方式运行：

1、设定目标主机（本例为172.16.100.6）

本案例中采用基于rsync守护进程的方式进行数据同步，其数据传输过程是明文方式，因此只适用于在特定的场景中应用。

1）安装相关软件：
目标主机是接收别的主机发送来的文件的服务器，因此，其rsync需要以守护进程的方式工作。rsync服务通常基于超级守护进程xinetd管理的方式来实现，因此需要事先安装rysnc和xinetd：
# yum -y install rsync xinetd

2）为rsync提供配置文件/etc/rsyncd.conf，内容类似如下内容：
# Section 1: Global settings
uid = nobody
gid = nobody
use chroot = no
max connections = 3
strict modes = yes
pid file = /var/run/rsyncd.pid
log file = /var/log/rsyncd.log
# Section 2：Directory to be synced
[htdocs]
path = /www/htdocs
ignore errors = yes
read only = no
write only = no
hosts allow = 172.16.0.0/16
hosts deny = *
list = false
uid = root
gid = root
auth users = wwwuser
secrets file = /etc/rsync.passwd

其中的相关指令及其说明可以通过rsyncd.conf的手册而获取。而其访问控制功能也可基于xinetd进行，具体方法请参照xinetd.conf的手册页。

3）提供secrets file所指定的口令文件/etc/rsync.passwd，其内容类似如下：
htdocsuser:passwOrdForhtdOcs

其中冒号前的是用户名，冒号后的是对应用户的密码。此文件不能为其他任意用户可访问，因此可用如下命令修改：
# chmod 600  /etc/rsync.passwd

4）配置服务可以开机启动：
# chkconfig rsync on
# chkconfig xinetd on
# service xinetd start

默认情况下，rsyncd监听的端口为873/TCP，这可以通过如下命令查看：
# netstat -tnlp | grep ":873"
tcp        0      0 0.0.0.0:873                 0.0.0.0:*                   LISTEN      3653/xinetd


在远程主机上使用类似如下命令进行数据同步：
rsync -avz --password-file=/etc/rsync.passwd SRCDIR htdocsuser@DESTHOST::htdocs



rsync+inotify博客: http://blog.chinaunix.net/uid-233544-id-3129307.html

http://bbs.chinaunix.net/forum.php?mod=viewthread&tid=987344&extra=page%3D2%26filter%3Ddigest%26digest%3D1%26digest%3D1




samba, awk, kernel+busybox(ssh, nginx)

文件共享服务：ftp, NFS, samba

Windows: NetBIOS, CIFS, SMB
	137,138,139,445

Wins
短名：

CIFS: Common Internet File System
SMB: Service Message Block

Windows: NTFS, FAT32
Linux: ext[234], xfs, reiserfs, jfs (vfs)

网络文件系统：背后支撑本地文件系统

NFS


Unix-like, Windows

samba: openldap (389)

AD: Active Directory (ldap) 

nmbd: NetBIOS
smbd: File Sharing
winbindd: AD

samba: 
[id1]
directive = 


[id2]


samba-client: 
	两种访问方式：
		1、交互式方式
			smb> get, put
		2、挂载网络文件系统


存储：
DAS
NAS 
SAN

samba用户帐号：
	帐号: 系统用户
	密码：samba自己维护有一个访问samba服务时专用的密码

samba安全级别：
	share: 允许匿名访问samba
	user: 提供有效帐号密码才能访问；
	server: 集中身份认证
	domain: 帐号和密码在DC 

samba接受SELinux控制
samba支持基于IP的访问控制
samba通过[homes]支持本地用户通过samba访问自己的家目录
Web GUI: swat (xinet)



配置：
/etc/samba
/etc/samba/smb.conf

全局段
homes段
共享段：多个共享

配置文件
新建共享：共享权限和文件系统权限的交集；
smbpasswd
smbclient
testparm
mount 

iptables控制samba服务
	UDP: 137，138
	TCP: 139，445

;writable = yes
guest ok = yes | public = yes
wrirte list = +mygrp



dialog: 命令
窗口元素：
	文本框
	单选框
	复选框
	进度条


calendar, yesno, msgbox, checklist, menu, form, gauge

dialog 通用选项 窗体类型 窗体特有选项

--stdout


Kernel+Busybox+(nsswitch)+dropbear+httpd(nginx)

系统启动过程：

POST -> BIOS -> MBR() -> Kernel (ramdisk/ramfs) -> /sbin/init -> /etc/rc.d/rc.sysinit(系统初始化脚本) -> /etc/rc.d/rc (/etc/rc.d/rcN.d <- /etc/rc.d/init.d/) -> mingetty (/dev/tty1-7) -> login

login: root
password: 
	
	nsswitch：名称解析的通用框架, 配置文件/etc/nsswitch.conf
	pam: Pluggable Authetication Module，通用认证框架

	bash:



	http: 



RHEL5: initrd
RHEL6: initramfs

512: 
	446：bootloader
	64: fat
	2: magic number

bootloader:
	grub: 
		1st stage: MBR
		2nd stage: /boot/grub/
	lilo

kernel初始化的基本操作：
	1、探测硬件；
	2、以只读方式挂载根文件系统；
	3、装载init

kernel+rootfs
	/boot


kernel+
	rootfs: /lib/modules/`uname -r`/

	ramdisk, ramfs


required
requisite
sufficient


auth: 认证
account: 审计
session: 特定于某次会话
password: 


交互式登录shell:
	su -
	正常登录
非交互式shell：
	su

crontab: 
	PATH=/bin:/sbin:/usr/bin:/usr/sbin

kernel(ramdisk/ramfs)+rootfs

Busybox: kernel(initrd)+rootfs


rootfs initrd





/etc/rc.d/init.d/
/etc/rc.d/services/


/etc/rc.d/rc 



awk:


grep, sed, awk: 

grep: 文本搜索工具, egrep, fgrep
	grep -E = egrep

sed: 行编辑器


awk: 报告生成工具


awk [options] 'script' File1, File2, ...

'PATTERN { action }'

空模式：每一行
BEGIN模式：
END模式：
正则表达式：/PATTERN/
表达式：$1 = 3
	>, <, >=, <=, ~, !~

-F: 
-f awk_script
-v VAR=VALUE : 自定义变量


分隔符：

字段分隔符，行分隔符
FS：Field Seperator
OFS：
NF: Number of Field, $4




awk [options] '模式{动作}' file1 file2 ...

模式：
	空模式
	BEGIN模式
	END模式
	正则表达式：/PATTERN/
		/pat1/,/pat2/: 
	表达式：

动作：
	输出：print, printf
	输入
	表达式
	控制语句：if, while, for, case, do ... while, break, continue, next
	组合语句

print item, item, item: OFS
printf "format", item1, item2
	%i: 
	%u：
	%s: 
	%e
	%g
	%f
	%c
	%d

awk脚本

awk -f 'awk_file' file1 file2

nawk

gawk

变量：命名的内存空间
数组：一组连续的可存多个值内存空间
使用数组索引：

bash
	ARRAY=('mon' 'tue' 'wed')
	ARRAY[2]

bash4：关联数组
ARRAY=(a='mon' b='tue' c='wed')
	ARRAY[c]































MVC: Model-View-Controller
	模型：存储及处理Web应用程序的代码；
	视图：格式化和显示Web应用用户界面的代码；
	控制器：将Web应用“粘合”在一起并提供业务逻辑的代码；

代码结构示例：
webapp
  |——cgi-bin
  |——data
  |——images
  |——templates

 Python提供了它自己的Web服务器，其位于http.server库模块中。要用python构建一个web服务器必须有类似以下几行代码：

 from http.server import HTTPServer, CGIHTTPRequestHandler
 # 导入HTTP服务器和CGI模块
 port = 8080
 # 指定监听的端口
 httpd = HTTPServer(('',port), CGIHTTPRequestHandler)
 # 创建HTTP服务器
 print("Starting httpd on port: " + str(httpd.server_port))
 httpd.server_forever()
 # 显示类似于banner信息并启动服务器

 



