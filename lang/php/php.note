数组类型:数值数组,关联数组,多维数组
$cars=array("Volvo","BMW","Toyota");
$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");

关联数组的遍历
<?php
$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");

foreach($age as $x=>$x_value)
  {
  echo "Key=" . $x . ", Value=" . $x_value;
  echo "<br>";
  }
?>

$families = array
  (
  "Griffin"=>array
  (
  "Peter",
  "Lois",
  "Megan"
  ),
  "Quagmire"=>array
  (
  "Glenn"
  ),
  "Brown"=>array
  (
  "Cleveland",
  "Loretta",
  "Junior"
  )
  );

=============switch
<?php
$favcolor="red";
switch ($favcolor)
{
case "red":
  echo "Your favorite color is red!";
  break;
case "blue":
  echo "Your favorite color is blue!";
  break;
case "green":
  echo "Your favorite color is green!";
  break;
default:
  echo "Your favorite color is neither red, blue, or green!";
}
?>

The foreach loop works only on arrays, and is used to loop through each key/value pair in an array.
---------------------for
<?php 
for ($x=0; $x<=10; $x++)
  {
  echo "The number is: $x <br>";
  } 
?>
===============do while
<?php 
$x=1; 
do
  {
  echo "The number is: $x <br>";
  $x++;
  }
while ($x<=5)
?>
=============function
<?php
function writeMsg()
{
echo "Hello world!";
}

writeMsg(); // call the function
?>

函数的返回值，变量，默认变量
==================
数组排序
sort（） rsort（） asort() ksort()
----------------
$GLOBAL is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods).
PHP stores all global variables in an array called $GLOBALS[index].

-----------$_SERVER 全局变量
$_SERVER['PHP_SELF']	Returns the filename of the currently executing script
$_SERVER['GATEWAY_INTERFACE']	Returns the version of the Common Gateway Interface (CGI) the server is using
$_SERVER['SERVER_ADDR']	Returns the IP address of the host server
$_SERVER['SERVER_NAME']	Returns the name of the host server (such as www.w3schools.com)
$_SERVER['SERVER_SOFTWARE']	Returns the server identification string (such as Apache/2.2.24)
$_SERVER['SERVER_PROTOCOL']	Returns the name and revision of the information protocol (such as HTTP/1.1)
$_SERVER['REQUEST_METHOD']	Returns the request method used to access the page (such as POST)
$_SERVER['REQUEST_TIME']	Returns the timestamp of the start of the request (such as 1377687496)
$_SERVER['QUERY_STRING']	Returns the query string if the page is accessed via a query string
$_SERVER['HTTP_ACCEPT']	Returns the Accept header from the current request
$_SERVER['HTTP_ACCEPT_CHARSET']	Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1)
$_SERVER['HTTP_HOST']	Returns the Host header from the current request
$_SERVER['HTTP_REFERER']	Returns the complete URL of the current page (not reliable because not all user-agents support it)
$_SERVER['HTTPS']	Is the script queried through a secure HTTP protocol
$_SERVER['REMOTE_ADDR']	Returns the IP address from where the user is viewing the current page
$_SERVER['REMOTE_HOST']	Returns the Host name from where the user is viewing the current page
$_SERVER['REMOTE_PORT']	Returns the port being used on the user's machine to communicate with the web server
$_SERVER['SCRIPT_FILENAME']	Returns the absolute pathname of the currently executing script
$_SERVER['SERVER_ADMIN']	Returns the value given to the SERVER_ADMIN directive in the web server configuration file (if your script runs on a virtual host, it will be the value defined for that virtual host) (such as someone@w3scholls.com)
$_SERVER['SERVER_PORT']	Returns the port on the server machine being used by the web server for communication (such as 80)
$_SERVER['SERVER_SIGNATURE']	Returns the server version and virtual host name which are added to server-generated pages
$_SERVER['PATH_TRANSLATED']	Returns the file system based path to the current script
$_SERVER['SCRIPT_NAME']	Returns the path of the current script
$_SERVER['SCRIPT_URI']	Returns the URI of the current page

---------------------$_REQUEST
$_GET is an array of variables passed to the current script via the URL parameters.

$_POST is an array of variables passed to the current script via the HTTP POST method.

===================
include 'filename';

or

require 'filename';

------------------cookie
setcookie("user", "Alex Porter", time()+3600);
-------------------
<?php
// Print a cookie
echo $_COOKIE["user"];

// A way to view all cookies
print_r($_COOKIE);
?>
--------------------
session_start()
session_destroy()

mail(to,subject,message,headers,parameters)
----------------------
filter_var() - Filters a single variable with a specified filter
filter_var_array() - Filter several variables with the same or different filters
filter_input - Get one input variable and filter it
filter_input_array - Get several input variables and filter them with the same or different filters
=========================
mysqli_connect()
mysqli_query($conn,$sql)
mysqli_close()
==================
SimpleXML converts the XML document (or XML string) into an object, like this:

Elements are converted to single attributes of the SimpleXMLElement object. When there's more than one element on one level, they are placed inside an array
Attributes are accessed using associative arrays, where an index corresponds to the attribute name
Text inside elements is converted to strings. If an element has more than one text node, they will be arranged in the order they are found

<?php
$xml=simplexml_load_file("note.xml");
print_r($xml);
?>

=================ajax
<html>
<head>
<script>
function showHint(str)
{
if (str.length==0)
  { 
  document.getElementById("txtHint").innerHTML="";
  return;
  }
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
xmlhttp.onreadystatechange=function()
  {
  if (xmlhttp.readyState==4 && xmlhttp.status==200)
    {
    document.getElementById("txtHint").innerHTML=xmlhttp.responseText;
    }
  }
xmlhttp.open("GET","gethint.php?q="+str,true);
xmlhttp.send();
}
</script>
</head>
<body>

<p><b>Start typing a name in the input field below:</b></p>
<form> 
First name: <input type="text" onkeyup="showHint(this.value)">
</form>
<p>Suggestions: <span id="txtHint"></span></p>

</body>
</html>

-------------
<?php
// Fill up array with names
$a[]="Anna";
$a[]="Brittany";
$a[]="Cinderella";
$a[]="Diana";
$a[]="Eva";
$a[]="Fiona";
$a[]="Gunda";
$a[]="Hege";
$a[]="Inga";
$a[]="Johanna";
$a[]="Kitty";
$a[]="Linda";
$a[]="Nina";
$a[]="Ophelia";
$a[]="Petunia";
$a[]="Amanda";
$a[]="Raquel";
$a[]="Cindy";
$a[]="Doris";
$a[]="Eve";
$a[]="Evita";
$a[]="Sunniva";
$a[]="Tove";
$a[]="Unni";
$a[]="Violet";
$a[]="Liza";
$a[]="Elizabeth";
$a[]="Ellen";
$a[]="Wenche";
$a[]="Vicky";

//get the q parameter from URL
$q=$_GET["q"];

//lookup all hints from array if length of q>0
if (strlen($q) > 0)
  {
  $hint="";
  for($i=0; $i<count($a); $i++)
    {
    if (strtolower($q)==strtolower(substr($a[$i],0,strlen($q))))
      {
      if ($hint=="")
        {
        $hint=$a[$i];
        }
      else
        {
        $hint=$hint." , ".$a[$i];
        }
      }
    }
  }

// Set output to "no suggestion" if no hint were found
// or to the correct values
if ($hint == "")
  {
  $response="no suggestion";
  }
else
  {
  $response=$hint;
  }

//output the response
echo $response;
?>

---------------------------
header()	Sends a raw HTTP header to a client	3
headers_list()	Returns a list of response headers sent (or ready to send)	5
headers_sent()	Checks if / where the HTTP headers have been sent	3
setcookie()	Sends an HTTP cookie to a client	3
setrawcookie()	Sends an HTTP cookie without URL encoding the cookie value

<?php
// Date in the past
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
header("Cache-Control: no-cache");
header("Pragma: no-cache");
?>



OOP达到了软件工程的三个目标：重用性、灵活性和扩展性




并置运算符 (.) 用于把两个字符串值连接起来

instanceof 用于检查一个对象是否是一个类的实例 


echo <<<EOF
...
EOF;


ini_set("display_error","1")
date_default_timezone_set()

date("H:i:s m-d-Y")
$b=$a++ || $b=++$a

$b=&$a;unset($a);

===恒等，必须值与数据类型全部一致

$result=($grade>=60?passed:failed);

@()错误抑制,不输出命令的错误信息

number_format($result,2)

gettype() settype()
unset() isset()
foreach($array as $key) echo $key
foreach ($array as $key => $value) echo $key . $value

define("$constant",100)

global $var;

fopen("file.txt","r")

fgets()fgetc() feof()

继承和重载 final禁止

php不能多重继承

public private protected
mysql_connect("host","user","passwd"，"database") mysql_close() mysql_error()
mysql_select_db() mysql_query()
---------------------------------
select column1 column2 from table where column3=value order by column4 desc;
insert into table(column1 column2.....) values (value1 value2....);
update table set column1=value1 column2=value2 ..... where column=value;
delete from table where column1=value1 and column2=value2;
create database dbname;
create table person (ID int not null auto_increment,primary key(ID),Firstname varchar(14),Age int);
grant all privileges on db.* to new_user identified by 'passwd';
revoke all privileges on db.* from user;
----------------------------
$xml=simplexml_load_file("name.xml");
foreach($result=$xml->xpath() as $a)
echo $a;
-------------------------------
array string ftp filter zip simplexml mysql  form file session cookie email
error ajax math filesystem

php最好通过echo '<br>'换行

die('message')

表单输入控制

php.ini disable_functions=

include(),require()

exec() ob_start() ob_end_clean() ob_end_flush()

string:
str_word_count() str_shuffle('a-z0-9') substr($str,0,strlen($str))
strrev() similar_text($str1,$str2,$result) strtr() strtoupper() strtolower()
trim() ltrim() rtrim() strpos() substr_replace() str_ireplace('old','new','target'  old and new can be array)
htmlentities()

array:
多维数组，关联数组，数组遍历

preg_match() preg_match_all()
isset() defined() empty()

echo date("Y-m-d H:i:s");
rand(1,10)

$_SERVER $_POST $_SESSION $_FILES $_COOKIE
$_REQUEST 


测试函数
extension_loaded('mysql')
isset() is_dir()
function_exists("readfile")
empty()
get_cfg_var()
file_exists()

数学计算
ceil() floor() pow() abs() sqrt() exp()  + - * / %

check: 1.isset() 2.empty()? 

setcookie('name','value','expire_time')
session_start();session_destroy();

 

explode(',',string)->array  implode(',',array)->string

file() fgets()(读取整行) fgetc()（读取字符） fopen() fread() fclose() filesize() fwrite() 
readfile() file_put_content() rename("original","another")
opendir() readdir()   pathinfo(file)['extension']

hash('md5',$string) crypt() md5() sha1()
hash_file() md5_file() 

<form method="" action="" enctype="multipart/form-data">
<input type="file" name="file" />
</form>


move_uploaded_file($_FILES['name']['tmp_name'],$location.$name)

mail(to,subject,body,header)

simplexml_load_file()

ini_get('display_errors')
ini_set('display_errors','0')
ini_get_all()
ini_restore('display_errors')




面向对象编程的3个特性：封装性，继承性，多态性

封装性是面象对象编程中的三大特性之一，封装性就是把对象的属性和服务结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节，包含两个含义：
1. 把对象的全部属性和全部服务结合在一起，形成一个不可分割的独立单位（即对象）。
2. 信息隐蔽，即尽可能隐蔽对象的内部细节，对外形成一个边界〔或者说形成一道屏障〕，只保留有限的对外接口使之与外部发生联系。
封装的原则在软件上的反映是：要求使对象以外的部分不能随意存取对象的内部数据（属性），从而有效的避免了外部错误对它的"交叉感染"，使软件错误能够局部化，大大减少查错和排错的难度。

继承是PHP5面象对象程序设计的重要特性之一，它是指建立一个新的派生类，从一个或多个先前定义的类中继承数据和函数，而且可以重新定义或加进新数据和函数，从而建立了类的层次或等级。说的简单点就是，继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系

所谓多态性是指一段程序能够处理多种类型对象的能力，比如说在公司上班，每个月财务发放工资，同一个发工资的方法，在公司内不同的员工或是不同职位的员工，都是通过这个方法发放的，但是所发的工资都是不相同的。所以同一个发工资的方法就出现了多种形态。对于面向对象的程序来说，多态就是把子类对象赋值给父类引用，然后调用父类的方法，去执行子类覆盖父类的那个方法，但在PHP里是弱类型的，对象引用都是一样的不分父类引用，还是子类引用。
把矩形对象和圆形对象分别赋给了变量$shape， 调用$shape引用中的面积和周长的方法，出现了不同的结果，这就是一种多态的 应用，其实在我们PHP这种弱类形的面向对象的语言里面，多态的特性并不是特别的明显，其实就是对象类型变量的变相引用。



有时候需要把一个对象在网络上传输，为了方便传输，可以把整个对象转化为二进制串，等到达另一端时，再还原为原来的对象，这个过程称之为串行化(也叫序列化)有两种情况我们必须把对象串行化，第一种情况就是把一个对象在网络中传输的时候要将对象串行化，第二种情况就是把对象写入文件或是数据库的时候用到串行化。

串行化有两个过程，一个是串行化，就是把对象转化为二进制的字符串，我们使用serialize()函数来串行化一个对象，另一个是反串行化，就是把对象转化的二进制字符串再转化为对象， 我们使用unserialize()函数来反串行化一个对象。
PHP中serialize()函数的参数为对象名，返回值为一个字符串，Serialize()返回的字符串含义模糊，一般我们不会解析这个串来得到对象的信息，我们只要把返回来的这个字符串传到网络另一端或是保存到文件中即可。
PHP中unserialize()函数来反串行化对象，这个函数的参数即为serialize()函数的返回值，输出当然是重新组织好的对象。

在PHP5中有两个魔术方法__sleep()方法和__wakeup()方法，在对象串行化的时候，会调用一个__sleep()方法来完成一 些睡前的事情；而在重新醒来，即由二进制串重新组成一个对象的时候，则会自动调用PHP的另一个函数__wakeup()，做一些对象醒来就要做的动作。
__sleep()函数不接受任何参数， 但返回一个数组，其中包含需要串行化的属性。末被包含的属性将在串行化时被忽略，如果没有__sleep()方法，PHP将保存所有属性。

在软件开发的系统中，不可能把所有的类都写在一个PHP文件中，当在一个PHP文件中需要调用另一个文件中声明的类时，就需要通过include把 这个文件引入。不过有的时候，在文件众多的项目中，要一一将所需类的文件都include进来，是一个很让人头疼的事，所以我们能不能在用到什么类的时 候，再把这个类所在的php文件导入呢？这就是我们这里我们要讲的自动加载类。
在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等



在PHP和Java语言里面没有多继承，只有单继承，也就是说，一个类只能直接从一个类中继承数据， 这就是我们所说的单继承。

php extends关键字

php对象销毁

在子类里父类的构造函数会不会执行，分两种情况：
1、如子类不定义构造函数 __construct()，则父类的构造函数默认会被继承下来，且会自动执行。
2、如子类定义了构造函数 __construct()，因为构造函数名也是__construct()，所以子类的构造函数实际上是覆盖(override)了父类的构造函数。这时执行的是该子类的构造函数

 所谓的方法重载就是定义相同的方法名，通过“参数的个数“不同或“参数的类型“不 同,来访问我们的相同方法名的不同方法。但是因为PHP是弱类型的语言， 所以在方法的参数中本身就可以接收不同类型的数据，又因为PHP的方法可以接收不定个数的参数，所以通过传递不同个数的参数调用不相同方法名的不同方法也是不成立的。所以在PHP里面没有方法重载

 一种是使用父类的“类名::“来调用父类中被覆盖的方法；
一种是使用“parent::”的方试来调用父类中被覆盖的方法；
现在用两种方式都可以访问到父类中被覆盖的方法，我们选那种方式最好呢？用户可能会发现自己写的代码访问了父类的变量和函数。如果子类非常精炼或者父类非 常专业化的时候尤其是这样。 不要用代码中父类文字上的名字，应该用特殊的名字 parent，它指的就是子类在 extends 声明中所指的父类的名字。这样做可以避免在多个地方使用父类的名字。如果继承树在实现的过程中要修改，只要简单地修改类中 extends 声明的部分。
同样，构造方法在子类中如果没有声明的话，也可以使用父类中的构造方法，如果子类中重新定义了一个构造方法也会覆盖掉父类中的构造方法，如果想使用新的构造方法为所有属性赋值也可以用同样的方式。

public (公有的、默认的)，protected (受保护的)和private (私有的)三种。

这个关键字只能用来定义类和定义方法， 不能使用final这个关键字来定义成员属性，因为final是常量的意思，我们在PHP里定义常量使用的是define()函数，所以不能使用final来定义成员属性。
使用final关键标记的类不能被继承；使用final关键标记的方法不能被子类覆盖，是最终版本；

如果我们把“国家”的属性做成静态的成员，这样国家的属性在内存中就只有一个，而让这几百个或更多的对象共用这一个属性，static成员能够限制外部的访问，因为static的成员是属于类的，是不属于任何对象实例，是在类第一次被加载的时候分配的空间，其他类是无法访问的，只对类的实例共享，能一定程度对类该成员形成保护；

类的静态变量，非常类似全局变量，能够被所有类的实例共享，类的静态方法也是一样的，类似于全局函数。

因为静态成员是在类第一次加载的时候就创建的，所以在类的外部不需要对象而使用类名就可以访问的到静态的成员；上面说过,静态成员被这个类的每个实例对象所共享，那么我们使用对象可不可以访问类中的静态成员呢？从上图中我们可以看到，静态的成员不是在每个对象内部存在的，但是每个对象都可以共享，所以我们如果使用对象访问成员的话就会出现没有这个属性定义，使用对象访问不到静态成员的，在其它的面向对象的语言中，比如Java是可以使用对象的方式访问静态成员的，如果PHP中可以使用对象访问静态成员的话，我们也尽量不要去使用，因为静态的成员我们在做项目的时候目的就是使用类名去访问。

在非静态方法里可不可以访问静态成员呢，当然也是可以的了，但是也不能使用“$this”引用，也要使用类名或是”self::成员属性的形式”。

const是一个定义常量的关键字，在PHP中定义常量使用的是“define()”这个函数，但是在类里面定义常量使用的是“const”这个关键字，类似于C中的#define如果在程序中改变了它的值，那么会出现错误，用“const”修饰的成员属性的访问方式和“static”修饰的成员访问的方式差不多，也是使用“类名”，在方法里面使用“self”关键字。但是不用使用“$”符号，也不能使用对象来访问。

对象引用是一个指针，比如 说：“$p=new Person()“中，$p就是一个引用，我们不能使用echo 直接输出$p，这样会输 出“Catchable fatal error: Object of class Person could not be converted to string”这样的错误，如果你在类里面定义了“__toString()”方法，在直接输出对象引用的时候，就不会产生错误，而是自动调用 了”__toString()”方法， 输出“__toString()”方法中返回的字符，所以“__toString()”方法一定要有个返回值（return 语句）。


在PHP5中我们使用“clone”这个关键字克隆对象；$p2=clone $p1;

“__call()”方法，这个方法有2个参数，第一个参数为调用不存在的方法过程中，自动调用__call()方法时，把这个不存在的方法的方法名传给第一个参数，第二个参数则是把这个方法的多个参数以数组的形式传进来

我们在类里面定义的没有方法体的方法就是抽象方法，所谓的没有方法体指的是，在方法声明的时候没有大括号以及其中的内容，而是直接在声明时在方法名后加上分号结束，另外在声明抽象方法时还要加一个关键字“abstract”来修饰；

只要一个类里面有一个方法是抽象方法，那么这个类就要定义为抽象类，抽象类也要使用“abstract”关键字来修饰；在抽象类里面可以有不是抽象的方法和成员属性，但只要有一个方法是抽象的方法，这个类就必须声明为抽象类，使用”abstract”来修饰


抽象类不能产生实例对象， 所以也不能直接使用前面我们多次提到过类不能直接使用，我们使用的是通过类实例化出来的对象，那么抽象类不能产生实例对象我们声明抽象类有什么用呢？我们是将抽象方法是做为子类重载的模板使用的，定义抽象类就相当于定义了一种规范，这种规范要求子类去遵守，子类继承抽象类之后，把抽象类里面的抽象方法按 照子类的需要实现。子类必须把父类中的抽象方法全部都实现，否则子类中还存在抽象方法，那么子类还是抽象类，还是不能实例化类；为什么我们非要从抽象类中继承呢？因为有的时候我们要实现一些功能就必须从抽象类中继承，否则这些功能你就实现不了，如果继承了抽象类，就要实现类其中的抽象方法；

接口里面所有的方法必须 都是声明为抽象方法，另外接口里面不能声明变量(但可声明常量constant),成员都是public权限的。所以子类在实现的时候 也一定要使用public权限实限。声明一个类的时候我们使用的关键字是“class”，而接口一种特殊的类，使用的关键字是“interface”;
因为接口是一种特殊的抽象类，里面所有的方法都是抽象方法，所以接口也不能产生实例对象; 它也做为一种规范，所有抽象方法需要子类去实现。

而我们定义一接口的子类去实现接口中全部抽象方法使用的关键字是“implements”，而不是我们前面所说的“extends”;

PHP是单继承的，一个类只能有一父类，但是一个类可以实现多个接口，就相当于一个类要遵守多个规范


PHP5定义了一个特殊的方法名“__clone()”方法，是在对象克隆时自动调用的方法，用“__clone()”方法将建立一个与原对象拥有相同属 性和方法的对象，如果想在克隆后改变原对象的内容，需要在__clone()中重写原本的属性和方法，  “__clone()”方法可以没有参数，它自 动包含$this和$that两个指针，$this指向复本，而$that指向原本； 
