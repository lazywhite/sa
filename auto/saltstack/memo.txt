概念
```
environment: defined in top.sls
grains: facter system
    self-defined: /etc/salt/minion
    server-side: /srv/salt/_grains/
pillar: minion attribute defined on master side
events: changed resource state
reactor: events to actions
beacon: monitor system processes and produce an event then trigger reactor
    filesystem change
    system load
    service status
    shell activity;such as user login
    network and disk usage

returner: store execute result into backend other than return to master
roster: salt-ssh
syndic: distribute manage system
```

常用命令
    salt db1 grains.get pythonpath --out=pprint
    salt "*" disk.usage
    salt "*" network.interfaces
    salt "*" test.ping


登录到客户端debug
    salt-call 
查看所有grain
    salt 'host' grains.items
查看某个grain
    salt 'host' grains.item host

查看模块文档
    salt "*"  sys.doc [module]



同步grain
    salt "*" saltutil.sync_grains
刷新pillar到minion
    salt "*" saltutil.refresh_pillar
查看匹配到的pillar
    salt "minion1" pillar.items
查看minion所有grain
    salt "*" grain.items

同步
    saltutil.sync_modules
    saltutil.sync_grains
    saltutil.sync_all

## returner system
```
执行结果处理系统

自定义returner
    /srv/salt/_returners/local.py
        from __future__ import print_function
        def returner(ret):
            print(ret)

下发returner
    salt '*' saltutil.sync_returners
测试
    salt '*'  cmd.run   'hostname'  --return    local
```

## 自定义grain
```
/srv/salt/_graines/
```

## 自定义module
```
/srv/salt/_modules/cheng.py
    def cheng(name):
      return __salt__['foo.foo'](name)
salt '*' saltutil.sync_modules
salt '*' cheng.cheng nae
```

## reactor system
```
salt-run state.event pretty=True  #display event in forground
salt-call event.send 'foo' '{orchestrate: refresh}' ## fire an event

salt/job/20150213001905721678/new       {
    "_stamp": "2015-02-13T00:19:05.724583",
    "arg": [],
    "fun": "test.ping",
    "jid": "20150213001905721678",
    "minions": [
        "jerry"
    ],
    "tgt": "*",
    "tgt_type": "glob",
    "user": "root"
}
## debug reactor system
    service salt-master stop
    salt-master -l debug  

```

## Topic
```
不需要为salt-minion开放端口, 只需要为salt-master开发4505,4506即可
master与minion版本需要一致
无法从syndic node获取pillar配置, 需要重启salt-master服务, 不是salt-syndic服务
```

### backup file 
```
file_foo:
  file.managed:
    - name: /root/foo
    - backup: minion

# salt-call --local file.list_backups /root/foo
local:
    local:
    0:
        Backup Time:
            Fri Jun 03 2016 17:21:25.573320
        Location:
            /var/cache/salt/minion/file_backup/etc/vimrc_Fri_Jun_03_17:21:25_573320_2016
        Size:
            2039
```


## template include 
{% include 'zabbix/templates/common.conf' %} : file path is not relative, should be absolute path



## host target
```
-E(regexp)
    'web1-(prod|devel)'
-L(list)
    'web1,web2,web3'
globbing(default)
    '*.example.*'
    'web?.example.net'
    'web[1-5]'
-S(subnet/IP)
-C(comboined)    
    "E@  and L@ and S@"

```

#### iptables module
```
salt 'mongo*' iptables.set_policy filter INPUT ACCEPT
salt 'mongo*' iptables.get_policy filter INPUT
salt 'mongo*' iptables.flush filter INPUT
salt 'mongo*' cmd.run ':>/etc/sysconfig/iptables'

```


### install salt on ubuntu 12.04
```
apt-get install python-software-properties
add-apt-repository ppa:saltstack/salt
apt-get update
apt-get install salt-minion
```


```

### salt minion regenerate keys
```
cd /etc/salt/
rm -rf pki/minion/*
:>minion_id
service salt-minion restart
```

### salt-minion cat generate keys
```
tail /var/log/salt/minion
for ubuntu-12.04: apt-get purge python-psutil
```

## remove a salt minion
```
salt-key -D <minion_id>
```

## change salt master
```
rm -rf /etc/salt/pki/minion/*
```

## auto accept key
```
{% if 'act' in data and data['act'] == 'pend' and data['id'].startswith('salt-sy') %}
key_accept:
    wheel.key.accept:
        - match: {{ data['id'] }}
{% endif %}
```

salt-run jobs.lookup_jid 20170412100938275448

