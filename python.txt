# store image into Redis
import redis
r =  redis.StrictRedis()
img = open("/path/to/img.jpeg","rb").read()
r.set("bild1",img)
---------------
python on mac os
    built_in module
        /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7
    third_party module
        /Library/Python/2.7/site-packages
    dynamic loaded
        /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/lib-dynload

-------------

os.walk('dir') --> (root, dirs, files)


import sys
reload(sys)
sys.setdefaultencoding('utf-8')

pinject
nose
unittest


requests.get(url, params=<dict>, headers=<dict>, data=<string>)

django middleware
django.conf.setting 


r=requests.get()
r.request.headers
r.json()
------------------
ipython autoload
    %reload_ext autoreload
    %autoreload 2
----------------

you can import a decorator then apply it to a function declaration

decorator chain
multi_level inherance


from test.a import * 
(定义__all__) 只会导入定义的属性
(没定义__all__)只会导入__init__.py
__all__ ,__file__ 需要显式定义


# how to test if multiple item in same container
item_set = set(item_list)
container_set = set(container)
if item_set.issubset(container_set): 
    return True


# set
#
a | b : 并集
a & b : 交集
a ^ b : 对称差集
a - b : b相对于a的差集


Exception.args

a._A__private()

random.seed(a=None)
# initialize  internal state from hashable object
a  = 10 if True else 100

from module import * :
# will not be imported
    _a 
    __a 

import module:
    module._a
    module.__a


# what information stored in special attribute
__dict__ : only store private attribute, no method
----------------

new_list = sorted(a_dict.iteritems(), key=lambda d:d[0]) 
    dict to sorted list

string.punctation : 所有的标点符号

--------------

bytes解码过后成为string,string编码后成为bytes
unicode 为python的内部编码
s = '中文' , 解释器会用默认编码存储一串bytes

m  = hashlib.md5()
m.update('hello')
m.update(' world')
m.hexdigest()
--> '5eb63bbbe01eeed093cb22bb8f5acdc3'
hashlib.md5('hello world').hexdigest()
--> '5eb63bbbe01eeed093cb22bb8f5acdc3'


from shutil import make_archive
name = os.path.expanduser(os.path.join('~', 'myarch'))
root_dir = os.path.expanduser(os.path.join('~','.ssh'))
make_archive(name, 'gztar', root_dir)



from cStringIO import StringIO
# python3  from io import StringIO
a = StringIO()
a.write('first line\n')
# a.seek(0)
print >>a, 'second line\n')
print a.getvalue()
a.close()
---------------

shelve module  不一致问题
-------- 

