#partition
    range based 
    hash based   crc32(hash(key))//nodes

client side partition
    client directly select the right node
proxy assisted partition
    client send request to proxy, proxy choose the right node
query routing
    basic
        client query random node, this node forward request to right node
    hybrid
        client query random node then get redirect to right node 

######### disadvantage of partition #####
Adding and removing capacity can be complex. For instance Redis Cluster supports mostly transparent rebalancing of data with the ability to add and remove nodes at runtime, but other systems like client side partitioning and proxies don't support this feature. However a technique called Pre-sharding helps in this regard.

######## sharding ###########
1. if redis is used as data store, it means a given key must always map to 
    the same redis instance 
key-instance map

Consistent hashing implementations are often able to switch to other nodes if the preferred node for a given key is not available. Similarly if you add a new node, part of the new keys will start to be stored on the new node.

The main concept here is the following:
    If Redis is used as a cache scaling up and down using consistent hashing is easy.
    If Redis is used as a store, a fixed keys-to-nodes map is used, so the number of nodes must be fixed and cannot vary. Otherwise, a system is needed that is able to rebalance keys between nodes when nodes are added or removed, and currently only Redis Cluster is able to do this - Redis Cluster is generally available and production-ready as of April 1st, 2015.


####### presharding #########
We learned that a problem with partitioning is that, unless we are using Redis as a cache, to add and remove nodes can be tricky, and it is much simpler to use a fixed keys-instances map.
    Start empty instances in your new server.
    Move data configuring these new instances as slaves for your source instances.
    Stop your clients.
    Update the configuration of the moved instances with the new server IP address.
    Send the SLAVEOF NO ONE command to the slaves in the new server.
    Restart your clients with the new updated configuration.
    Finally shut down the no longer used instances in the old server.

######### implementtion ########
redis cluster: base on query routing and client side partitioning 
    automatic sharding 
    high availability
    
twemproxy
    multi proxy 
    maitain a key-instance map
    better use as cache

Redis-rb , Predis
    client side consistant hashing
