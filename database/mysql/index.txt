索引列必须有值， 唯一索引必须有不重复的值

实际中由于索引文件巨大, 很可能无法一次性全部加载到内存, 只能逐一加载磁盘页
磁盘页对应着索引树的节点

B-tree
===========
B-tree是一种多路平衡查找树, 它的每一个节点最多包含m个子节点, m为B树的阶
B-tree跟二叉树相比, 树的深度大大缩短, 用在索引中可以降低磁盘IO次数

B-tree的插入和删除要根据一定的算法进行节点的分裂和合并, 以保证自平衡

node类型
    root node
    internal node
    leaf node


m阶B-树的特征
    1. 根节点至少有两个子节点
    2. 每个中间节点至少包含m/2个元素, 至多m-1个元素
    3. 每个中间节点至少有m/2个子节点, 至多有m个子节点
    4. 每个叶节点至少包含m/2个元素, 至多m-1个元素
    5. 所有的叶子节点都位于同一层
    6. 节点中的元素可以视为key, value组合
    7. 每个节点中的元素从小到大排列, 并且作为划分子节点的依据 

特点
    1. 节点会为元素预留空间, 导致空间浪费
    2. 搜索可能在internal node结束, 查找性能不稳定, 最坏情况下是在叶节点结束
    3. 范围查询只能进行中序遍历, 性能较差

B+tree
============
特征
    1. 根节点至少有两个子节点
    2. 每个中间节点至少包含m/2个元素, 至多m个元素
    3. 每个中间节点至少有m/2个子节点, 至多有m个子节点
    4. 每个节点中的元素中只包含key, 没有value
    5. 所有的叶子节点包含了树中所有的元素及指向这些元素的指针
    6. 所有的中间节点元素都同时存在于子节点, 在子节点元素中是最大或最小元素
    7. 根节点的最大元素就是整棵数最大的元素, 插入和删除要保证最大元素在根节点
    8. 每一个叶节点都包含指向下一个叶节点的指针, 形成有序链表, 范围查询性能很高

特点:
    1. 搜索只能在leaf node结束, 查询性能稳定
    2. 每个节点不包含value, 因此同样的磁盘页可以容纳更多的节点元素, 树的深度更低
    3. 范围查询性能高

mysql使用B+tree索引, 包含两种
    聚簇索引
        叶子节点上的data就是数据本身
    非聚簇索引
        叶子节点上的data，并不是数据本身，而是数据存放的物理地址。

Hash
==========
1. 只能应用在HEAP/MEMORY引擎的表中, 这种类型的表数据不能持久化
2. 只能进行 =, in, <=>这样的查询, 不支持范围查询
3. 不能加速order by等排序运算
4. 精确匹配的查询可以一次到位, 不需要像B+tree一样进行多级查询

