索引采取树结构是因为查询效率高, 而且可以保持有序
mysql的索引结构是B+Tree, 包含两种类型
    聚簇索引: 逻辑顺序与数据物理位置一致, 类似字典拼音目录, 适合多行查询
    非聚簇索引: 逻辑顺序不与物理位置一致, 类似字典偏旁目录，适合单行查询

索引列必须有值， 唯一索引必须有不重复的值

实际中由于索引文件巨大, 很可能无法一次性全部加载到内存, 只能逐一加载磁盘页
磁盘页对应着索引树的节点

B-tree
===========
B-tree是一种多路平衡查找树, 它的每一个节点最多包含m个子节点, m为B树的阶
B-tree跟二叉树相比, 树的深度大大缩短, 用在索引中可以降低磁盘IO次数

B-tree的插入和删除要根据一定的算法进行节点的分裂和合并, 以保证自平衡

节点中的元素用来作为划分子节点的标准
node类型
    root node
    internal node
    leaf node


m阶B-树的特征
    1. 根节点至少有两个子节点
    2. 每个中间节点至少包含m/2个元素, 至多m-1个元素
    3. 每个中间节点至少有m/2个子节点, 至多有m个子节点
    4. 所有的叶子节点都位于同一层
    5. 节点中的元素可以视为key, value组合

特点
    1. 新增或删除操作有可能会影响到多个节点
    2. 浪费较多空间
    3. 搜索可能在internal node结束

B+tree
============
特征
    1. 根节点至少有两个子节点
    2. 每个中间节点至少包含m/2个元素, 至多m个元素
    3. 每个中间节点至少有m/2个子节点, 至多有m个子节点
    4. 每个节点中只包含key, 没有value

特点:
    1. 搜索只能在leaf node结束

mysql使用B+tree索引, 包含两种
    聚簇索引
        叶子节点上的data就是数据本身
    非聚簇索引
        叶子节点上的data，并不是数据本身，而是数据存放的地址。
